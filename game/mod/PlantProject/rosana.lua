---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ryann.
--- DateTime: 04/07/2023 14:23
---

_editor_class["MainMenu_Manager"]=Class(_object)
_editor_class["MainMenu_Manager"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
    self.selectionIndex = 1
    self.selectionOptionsIndex = 1
    self.selectionsPosition = {
        {-115, 200 - 50},
        {-115, 150 + 15 - 50},
        {-115, 100 + 30 - 50},
        {-115, 50 + 45 - 50}
    }

    self.optionsIn = false
    self.resolutions = {
        {640, 360},
        {853, 480},
        {1024, 576},
        {1280, 720},
        {1366, 768},
        {1600, 900},
        {1920, 1080}
    }
    self.resolutionPick = 1;
    self.windowed = setting.windowed or true;
    self.vsync = setting.vsync or true;
    self.bgm = setting.bgmvolume
    self.sfx = setting.sevolume
    self.optionsText = {
        "Resolution: " .. self.resolutions[self.resolutionPick][1] .. "x" .. self.resolutions[self.resolutionPick][2],
        "\nWindowed: " .. tostring(self.windowed),
        "\n\nVsync: " .. tostring(self.vsync),
        "\n\n\nBGM Volume: " .. self.bgm,
        "\n\n\n\nSFX Volume: " .. self.sfx,
        "\n\n\n\n\nSave and Apply"
    }

    self.selectionPositionRefX = {0, 0, 0, 0}
    self.selectionOptionsPositionRefX = {0, 0, 0, 0, 0, 0}
    self.selectionHighlightRefY = 150

    self.images = {
        "image:TitleSelections1",
        "image:TitleSelections2",
        "image:TitleSelections3",
        "image:TitleSelections4"
    }


end
_editor_class["MainMenu_Manager"].frame=function(self)
    self.class.base.frame(self)
    _set_rel_pos(self,0,0,self.rot,false)
    if BaseDrop.positionIndex == 1 then
        if self.optionsIn == false then
            if is_up_held then
                self.selectionIndex = Wrap(self.selectionIndex - 1, 1, 5)
                PlaySound("select00",0.1,0,false)
            end

            if is_down_held then
                self.selectionIndex = Wrap(self.selectionIndex + 1, 1, 5)
                PlaySound("select00",0.1,0,false)
            end

            if KeyIsPressed"shoot" then
                if (self.selectionIndex == 1) then

                end
                if (self.selectionIndex == 2) then
                    BaseDrop.positionIndex = 2
                end
                if (self.selectionIndex == 3) then
                    self.selectionOptionsIndex = 1
                    self.optionsIn = true;
                end
                if (self.selectionIndex == 4) then
                    stage.QuitGame()
                end
                PlaySound("ok00",0.1,0,false)
            end
        else
            if is_up_held then
                self.selectionOptionsIndex = Wrap(self.selectionOptionsIndex - 1, 1, 7)
                PlaySound("select00",0.1,0,false)
            end

            if is_down_held then
                self.selectionOptionsIndex = Wrap(self.selectionOptionsIndex + 1, 1, 7)
                PlaySound("select00",0.1,0,false)
            end

            if self.selectionOptionsIndex == 1 then
                if is_left_held then self.resolutionPick = Wrap(self.resolutionPick - 1, 1, 8); PlaySound("select00",0.1,0,false) end
                if is_right_held then self.resolutionPick = Wrap(self.resolutionPick + 1, 1, 8); PlaySound("select00",0.1,0,false) end
            elseif self.selectionOptionsIndex == 2 then
                if is_left_held then self.windowed = not self.windowed; PlaySound("select00",0.1,0,false) end
                if is_right_held then self.windowed = not self.windowed; PlaySound("select00",0.1,0,false) end
            elseif self.selectionOptionsIndex == 3 then
                if is_left_held then self.vsync = not self.vsync; PlaySound("select00",0.1,0,false) end
                if is_right_held then self.vsync = not self.vsync; PlaySound("select00",0.1,0,false) end
            elseif self.selectionOptionsIndex == 4 then
                if is_left_held and KeyIsPressed"slow" then
                    self.bgm = Wrap(self.bgm - 1, 0, 101); PlaySound("select00",0.1,0,false)
                elseif is_left_held then
                    self.bgm = Wrap(self.bgm - 10, 0, 101); PlaySound("select00",0.1,0,false)
                end
                if is_right_held and KeyIsPressed"slow" then
                    self.bgm = Wrap(self.bgm + 1, 0, 101); PlaySound("select00",0.1,0,false)
                elseif is_right_held then
                    self.bgm = Wrap(self.bgm + 10, 0, 101); PlaySound("select00",0.1,0,false)
                end
            elseif self.selectionOptionsIndex == 5 then
                if is_left_held and KeyIsPressed"slow" then
                    self.sfx = Wrap(self.sfx - 1, 0, 101); PlaySound("select00",0.1,0,false)
                elseif is_left_held then
                    self.sfx = Wrap(self.sfx - 10, 0, 101); PlaySound("select00",0.1,0,false)
                end
                if is_right_held and KeyIsPressed"slow" then
                    self.bgm = Wrap(self.sfx + 1, 0, 101); PlaySound("select00",0.1,0,false)
                elseif is_right_held then
                    self.sfx = Wrap(self.sfx + 10, 0, 101); PlaySound("select00",0.1,0,false)
                end
            end

            if KeyIsPressed"shoot" then
                if self.selectionOptionsIndex == 1 then
                    self.resolutionPick = Wrap(self.resolutionPick + 1, 1, 8)
                elseif self.selectionOptionsIndex == 2 then
                    self.windowed = not self.windowed
                elseif self.selectionOptionsIndex == 3 then
                    self.vsync = not self.vsync
                elseif self.selectionOptionsIndex == 4 then
                    self.bgm = Wrap(self.bgm + 10, 0, 101)
                elseif self.selectionOptionsIndex == 5 then
                    self.sfx = Wrap(self.sfx + 10, 0, 101)
                elseif self.selectionOptionsIndex == 6 then
                    setting.resx = self.resolutions[self.resolutionPick][1]
                    setting.resy = self.resolutions[self.resolutionPick][2]
                    setting.windowed = self.windowed
                    setting.vsync = self.vsync
                    setting.bgmvolume = self.bgm
                    setting.sevolume = self.sfx
                    SetBGMVolume(setting.bgmvolume * 0.01)
                    SetSEVolume(setting.sevolume * 0.01)
                    saveConfigure()
                    ChangeVideoMode(setting.resx, setting.resy, setting.windowed, setting.vsync)
                    ResetScreen()
                    self.optionsIn = false
                end
                PlaySound("ok00",0.1,0,false)
            end
        end

        self.optionsText = {
            "Resolution: " .. self.resolutions[self.resolutionPick][1] .. "x" .. self.resolutions[self.resolutionPick][2],
            "\nWindowed: " .. tostring(self.windowed),
            "\n\nVsync: " .. tostring(self.vsync),
            "\n\n\nBGM Volume: " .. self.bgm,
            "\n\n\n\nSFX Volume: " .. self.sfx,
            "\n\n\n\n\nSave and Apply"
        }
    end
end
_editor_class["MainMenu_Manager"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    if self.optionsIn == false then
        self.selectionHighlightRefY = LerpDecel(self.selectionHighlightRefY, self.selectionsPosition[self.selectionIndex][2], 0.2)
        Render("image:TitleSelectionsHighlight",
                self.selectionsPosition[self.selectionIndex][1] + self.x - 41,
                self.selectionHighlightRefY + self.y,
                0, self.hscale, self.vscale)
    else
        self.selectionHighlightRefY = LerpDecel(self.selectionHighlightRefY, 185 - ((self.selectionOptionsIndex - 1) * 28.5), 0.2)
        Render("image:TitleSelectionsHighlight",
                self.x - 115 - 41,
                self.selectionHighlightRefY + self.y,
                0, self.hscale, self.vscale)
    end


    for i = 1, 4 do
        if self.optionsIn == false then
            if i == self.selectionIndex then
                self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], 15, 0.2)
                SetImageState(self.images[i], "", Color(255, 255, 255, 255))
                Render(self.images[i],
                        self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
                        self.selectionsPosition[i][2] + self.y,
                        0, self.hscale, self.vscale)
            else
                self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], 0, 0.2)
                SetImageState(self.images[i], "", Color(155, 255, 255, 255))
                Render(self.images[i],
                        self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
                        self.selectionsPosition[i][2] + self.y,
                        0, self.hscale, self.vscale)
            end
        else
            self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], -200, 0.2)
            SetImageState(self.images[i], "", Color(155, 255, 255, 255))
            Render(self.images[i],
                    self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
                    self.selectionsPosition[i][2] + self.y,
                    0, self.hscale, self.vscale)
        end
    end

    if BaseDrop.positionIndex == 1 then
        for i = 1, 6 do
            if self.optionsIn == true then
                if i == self.selectionOptionsIndex then
                    self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], 15, 0.2)
                    SetFontState("font:trocchi", "", Color(255,255,255,255))
                    lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
                else
                    self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], 0, 0.2)
                    SetFontState("font:trocchi", "", Color(100,255,255,255))
                    lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
                end
            else
                self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], -350, 0.2)
                SetFontState("font:trocchi", "", Color(100,255,255,255))
                lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
            end
        end
    end
    SetViewMode'world'
end
