-- Generated by LuaSTG Editor Sharp X 0.74.3
-- Mod name: PlantProject
_author = "Ryann1908"
_mod_version = 4096
_allow_practice = true
_allow_sc_practice = true
SetSplash(true)
-- MenuInputChecker
	function MenuInputChecker(name)
	    while(true) do
	        while(not KeyIsPressed(name))do
	            coroutine.yield(false) --return false until the key is pressed
	        end
	        coroutine.yield(true) --return true once
	        for i=0, 20 do
	            coroutine.yield(false) --return false for 30 frames
	            if (not KeyIsDown(name)) then
	                break --if the key is not being held down, break out of for (which will make you consequently restart
	            end
	        end
	        while (KeyIsDown(name)) do
	            coroutine.yield(true) -- return true once every 3 frames
	            for i=0, 2 do
	                coroutine.yield(false) --return false for 3 frames
	            end
	        end
	    end
	end

-- SetWorldUEX
	function SetWorldUEX(x, y, w, h, bound, m)
		bound = bound or 32
		m = m or 15
		OriginalSetWorld(
		--l,r,b,t,
				(-w / 2), (w / 2), (-h / 2), (h / 2),
		--bl,br,bb,bt
				(-w / 2) - bound, (w / 2) + bound, (-h / 2) - bound, (h / 2) + bound,
		--sl,sr,sb,st
				(x - w/2), (x + w/2), (y - h/2), (y + h/2),
		--pl,pr,pb,pt
				(-w / 2), (w / 2), (-h / 2), (h / 2),
		--world mask
				m
		)
		SetBound(lstg.world.boundl, lstg.world.boundr, lstg.world.boundb, lstg.world.boundt)
	end

-- Wrap
	function Wrap(x, x_min, x_max)
		return (((x - x_min) % (x_max - x_min)) + (x_max - x_min)) % (x_max - x_min) + x_min;
	end

-- Clamp
	function Clamp(val, lower, upper)
	    assert(val and lower and upper, "not very useful error message here")
	    if lower > upper then lower, upper = upper, lower end -- swap if boundaries supplied the wrong way
	    return math.max(lower, math.min(upper, val))
	end

-- Interpolation
	function LerpDecel(a, b, x)
	    local y = 1 - x
	    return (a + (1 - y * y) * (b - a))
	end
	
	function Lerp(a, b, t)
	    return a + (b - a) * t
	end

-- Format Score
	function FormatScore(num)
	    local str = string.format('%012d', num)
	    return string.format('%s,%s,%s,%s',
	            str:sub(1,3), str:sub(4,6),str:sub(7,9),str:sub(10,12))
	end

-- archive space: MUSIC\
MusicRecord('bgm:'..'TitleTheme','MUSIC\\TitleTheme.ogg',0,0)
-- archive space: 
lstg.LoadFont('font:'..'trocchi','font\\trocchi.fnt',true)
--- Load Font Image "trocchi"
lstg.LoadFont('font:'..'simplymono','font\\simplymono.fnt',true)
--- Load Font Image "simplymono"
-- archive space: TITLE\
_LoadImageFromFile('image:'..'BaseDrop','TITLE\\BaseDrop.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleBackgroundSun','TITLE\\TitleBackgroundSun.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleBackgroundSunRay','TITLE\\TitleBackgroundSunRay.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleLogo','TITLE\\TitleLogo.png',true,0,0,false,0)
SetImageCenter("image:TitleBackgroundSunRay",1200,70)
LoadTexture('texture:'..'TitleBackgroundFog','TITLE\\TitleBackgroundFog.png',true)
SetTextureSamplerState("texture:TitleBackgroundFog", "point+wrap")
_LoadImageFromFile('image:'..'TitleBackgroundCliff','TITLE\\TitleBackgroundCliff.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleBackgroundMountains','TITLE\\TitleBackgroundMountains.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'TitleSelections','TITLE\\TitleSelections.png',true,4,1,0,0,false)
_LoadImageFromFile('image:'..'TitleSelectionsHighlight','TITLE\\TitleSelectionsHighlight.png',true,0,0,false,0)
LoadTexture('texture:'..'TitleBackgroundClouds','TITLE\\TitleBackgroundClouds.png',true)
SetTextureSamplerState("texture:TitleBackgroundClouds", "point+wrap")
_LoadImageFromFile('image:'..'TitleBackgroundStone','TITLE\\TitleBackgroundStone.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'TitleLeaves','TITLE\\TitleLeaves.png',true,9,1,0,0,false)
_LoadImageFromFile('image:'..'ShopSlot','TITLE\\ShopSlot.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'ShopSlotSeller','TITLE\\ShopSlotSeller.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'ShrubsCards','TITLE\\ShrubsCards.png',true,8,1,0,0,false)
for i = 1, 8 do
	CopyImage("image:ShrubsCardsAlt" .. i, "image:ShrubsCards" .. i)
end
_LoadImageGroupFromFile('image:'..'ShrubsCardsGray','TITLE\\ShrubsCardsGray.png',true,8,1,0,0,false)
_LoadImageFromFile('image:'..'ShopBoard','TITLE\\ShopBoard.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'YuukaShop','TITLE\\YuukaShop.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'ShopBoardDesc','TITLE\\ShopBoardDesc.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'YuukaTalkBox','TITLE\\YuukaTalkBox.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'ActSelectRibbon','TITLE\\ActSelectRibbon.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'ActSelectShadow','TITLE\\ActSelectShadow.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'InventoryBoard','TITLE\\InventoryBoard.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'EquippedBoard','TITLE\\EquippedBoard.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'PlantedBoard','TITLE\\PlantedBoard.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleShadowCircle','TITLE\\TitleShadowCircle.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'TitleBGMLabel','TITLE\\TitleBGMLabel.png',true,0,0,false,0)
-- archive space: 
-- archive space: BACKGROUNDS\
_LoadImageFromFile('image:'..'BG_Eternity_1','BACKGROUNDS\\BG_Eternity_1.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'BG_Eternity_2','BACKGROUNDS\\BG_Eternity_2.png',true,0,0,false,0)
_editor_class["EternityBG"]=Class(_spellcard_background)
_editor_class["EternityBG"].init=function(self)
	_spellcard_background.init(self)
	_spellcard_background.AddLayer(self,"image:BG_Eternity_2",true,0,0,0,0.4,-0.4,0,"",1/2.25-0.2,1/2.25-0.2,
		function(self)
			self.task={}
			self.a = 80
		end,
		function(self)
			task.Do(self)
		end,
		function(self)
		end
	)
	_spellcard_background.AddLayer(self,"image:BG_Eternity_1",true,0,0,0,0,0.4,0,"",1/2.25-0.2,1/2.25-0.2,
		function(self)
			self.task={}
		end,
		function(self)
			task.Do(self)
		end,
		function(self)
		end
	)
end
_LoadImageFromFile('image:'..'BG_Isaki_1','BACKGROUNDS\\BG_Isaki_1.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'BG_Isaki_2','BACKGROUNDS\\BG_Isaki_2.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'BG_Isaki_3','BACKGROUNDS\\BG_Isaki_3.png',true,0,0,false,0)
_editor_class["IsakiBG"]=Class(_spellcard_background)
_editor_class["IsakiBG"].init=function(self)
	_spellcard_background.init(self)
	_spellcard_background.AddLayer(self,"image:BG_Isaki_3",true,0,0,0,0,0.35,0,"mul+add",1/2.25 - 0.2,1/2.25 - 0.2,
		function(self)
			self.task={}
		end,
		function(self)
			task.Do(self)
		end,
		function(self)
		end
	)
	_spellcard_background.AddLayer(self,"image:BG_Isaki_2",false,0,0,0,0,0,0.1,"mul+rev",1/2.25 - 0.15,1/2.25 - 0.15,
		function(self)
			self.task={}
		end,
		function(self)
			task.Do(self)
		end,
		function(self)
		end
	)
	_spellcard_background.AddLayer(self,"image:BG_Isaki_1",false,0,0,0,0,0,0,"",1/2.25,1/2.25,
		function(self)
			self.task={}
		end,
		function(self)
			task.Do(self)
		end,
		function(self)
		end
	)
end
-- archive space: 
-- archive space: PORTRAITS\ISAKI\
_LoadImageFromFile('image:'..'Isaki_Shadow','PORTRAITS\\ISAKI\\Isaki_Shadow.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Isaki_Highlight','PORTRAITS\\ISAKI\\Isaki_Highlight.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Isaki_Cutin','PORTRAITS\\ISAKI\\Isaki_Cutin.png',true,0,0,false,0)
-- archive space: 
-- archive space: PORTRAITS\ETERNITY\
_LoadImageFromFile('image:'..'Eternity_Shadow','PORTRAITS\\ETERNITY\\Eternity_Shadow.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Eternity_Highlight','PORTRAITS\\ETERNITY\\Eternity_Highlight.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Eternity_Cutin','PORTRAITS\\ETERNITY\\Eternity_Cutin.png',true,0,0,false,0)
-- archive space: 
-- archive space: PORTRAITS\MARISA\
_LoadImageFromFile('image:'..'Marisa_1','PORTRAITS\\MARISA\\Marisa_1.png',true,0,0,false,0)
-- archive space: 
-- archive space: PORTRAITS\KICHI\
_LoadImageFromFile('image:'..'Kichi_Shadow','PORTRAITS\\KICHI\\Kichi_Shadow.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Kichi_Highlight','PORTRAITS\\KICHI\\Kichi_Highlight.png',true,0,0,false,0)
-- archive space: 
-- archive space: SPRITES\GENERAL\
_LoadImageFromFile('image:'..'ShrubShadow','SPRITES\\GENERAL\\ShrubShadow.png',true,0,0,false,0)
SetImageCenter("image:ShrubShadow",0,1008)
_LoadImageGroupFromFile('image:'..'ShrubsShooters','SPRITES\\GENERAL\\ShrubsShooters.png',true,8,1,0,0,false)
for _=1,8 do
	SetImageCenter("image:ShrubsShooters" .. _,456,312)
end
_LoadImageGroupFromFile('image:'..'UIElements','SPRITES\\GENERAL\\UIElements.png',true,4,2,0,0,false)
_LoadImageFromFile('image:'..'HeartIcon','SPRITES\\GENERAL\\HeartIcon.png',true,0,0,false,0)
-- archive space: 
-- archive space: SPRITES\MARISA\
_LoadImageFromFile('image:'..'arml','SPRITES\\MARISA\\arml.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'armr','SPRITES\\MARISA\\armr.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'broom','SPRITES\\MARISA\\broom.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'hair','SPRITES\\MARISA\\hair.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'hat','SPRITES\\MARISA\\hat.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'hattop','SPRITES\\MARISA\\hattop.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'legl','SPRITES\\MARISA\\legl.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'legr','SPRITES\\MARISA\\legr.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'skirt','SPRITES\\MARISA\\skirt.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'torso','SPRITES\\MARISA\\torso.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'waist_ribbon','SPRITES\\MARISA\\waist_ribbon.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'Marisa_Shot','SPRITES\\MARISA\\Marisa_Shot.png',true,4,1,0,0,false)
_LoadImageFromFile('image:'..'Hakkero','SPRITES\\MARISA\\Hakkero.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'Fire_Shot','SPRITES\\MARISA\\Fire_Shot.png',true,4,1,0,0,false)
_LoadImageGroupFromFile('image:'..'Earth_Shot','SPRITES\\MARISA\\Earth_Shot.png',true,4,1,0,0,false)
_LoadImageGroupFromFile('image:'..'Ice_Shot','SPRITES\\MARISA\\Ice_Shot.png',true,4,1,0,0,false)
_LoadImageFromFile('image:'..'Lightning_Ray','SPRITES\\MARISA\\Lightning_Ray.png',true,0,0,false,0)
SetImageCenter("image:Lightning_Ray",0, 32)
-- archive space: 
_editor_class["Base_Drop"]=Class(_object)
_editor_class["Base_Drop"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP-5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.positions = {
		[0] = { screen.width,       screen.height - 480 },
		{ screen.width,       screen.height - 480 }, 
		{ screen.width - 853, screen.height - 480 }, 
		{ screen.width,       screen.height       }, 
		{ screen.width - 853, screen.height       }
	}
	self.positionIndex = 0
	BaseDrop = self
	last=New(_editor_class["Background_Sun"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Title_Logo"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Background_Fog"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Title_Mountains"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Title_Sky"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Title_Cliff"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Title_BGM"],self.x,self.y,_)
	_connect(self,last,0,false)
	last=New(_editor_class["MainMenu_Manager"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Shop_Manager"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Act_Select"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Loadout_Select"],0,0,_)
	_connect(self,last,0,false)
	last=New(_editor_class["Blackout_Overlay"],self.x,self.y,_)
end
_editor_class["Base_Drop"].frame=function(self)
	if KeyIsPressed"shoot" then
		--self.positionIndex = self.positionIndex + 1
		--self.positionIndex = Wrap(self.positionIndex, 1, 5)
	end
	
	self.x = LerpDecel(self.x, self.positions[self.positionIndex][1], 0.1)
	self.y = LerpDecel(self.y, self.positions[self.positionIndex][2], 0.1)
	self.class.base.frame(self)
end
_editor_class["Base_Drop"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Background_Sun"]=Class(_object)
_editor_class["Background_Sun"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleBackgroundSun"
	self.layer=LAYER_TOP+1
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.omiga = 0.15
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	do local ang,_d_ang=(0),(360/5) for _=1,5 do
		last=New(_editor_class["Background_Sun_Ray"],self.x,self.y,-0.1)
		last.rot = ang
		_connect(self,last,0,false)
	ang=ang+_d_ang end end
	do local ang,_d_ang=((360/5) / 2),(360/5) for _=1,5 do
		last=New(_editor_class["Background_Sun_Ray"],self.x,self.y,0.1)
		last.rot = ang
		_connect(self,last,0,false)
	ang=ang+_d_ang end end
end
_editor_class["Background_Sun"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,-175, 400,self.rot,false)
end
_editor_class["Background_Sun"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Background_Sun_Ray"]=Class(_object)
_editor_class["Background_Sun_Ray"].init=function(self,_x,_y,omiga)
	self.x,self.y=_x,_y
	self.img="image:TitleBackgroundSunRay"
	self.layer=LAYER_TOP
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.omiga = omiga
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	_object.set_color(self,"",55,255,255,255)
end
_editor_class["Background_Sun_Ray"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0, 0,self.rot,false)
end
_editor_class["Background_Sun_Ray"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Title_Logo"]=Class(_object)
_editor_class["Title_Logo"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleLogo"
	self.layer=LAYER_TOP+100
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
end
_editor_class["Title_Logo"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,-525, 250 + (sin(self.timer) * 6),self.rot,false)
end
_editor_class["Title_Logo"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Background_Fog"]=Class(_object)
_editor_class["Background_Fog"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP-1
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	_object.set_color(self,"",0,255,255,255)
	self.addx = 0
end
_editor_class["Background_Fog"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	self.addx = self.addx + 1
end
_editor_class["Background_Fog"].render=function(self)
	SetViewMode'ui'
	local tex_name = "texture:TitleBackgroundFog"
	local tex_width, tex_height = GetTextureSize(tex_name)
	tex_width, tex_height = tex_width, tex_height
	
	local top_left =     {0   + self.x - 853, 480 + self.y + 30}
	local top_right =    {853 + self.x - 853, 480 + self.y + 30}
	local bottom_right = {853 + self.x - 853, 0   + self.y + 30}
	local bottom_left =  {0   + self.x - 853, 0   + self.y + 30}
	
	local col = Color(255, 255, 255, 255)
	
	local tl, tr, br, bl = top_left, top_right, bottom_right, bottom_left
	local tw, th = tex_width, tex_height
	
	RenderTexture(tex_name, "",
	             {tl[1], tl[2], 1, 0  + self.addx, 0,  col},
	             {tr[1], tr[2], 1, tw + self.addx, 0,  col},
	             {br[1], br[2], 1, tw + self.addx, th, col},
	             {bl[1], bl[2], 1, 0  + self.addx, th, col}
	             )
	             
	top_left =     {0   + self.x, 480 + self.y + 30}
	top_right =    {853 + self.x, 480 + self.y + 30}
	bottom_right = {853 + self.x, 0   + self.y + 30}
	bottom_left =  {0   + self.x, 0   + self.y + 30}
	
	col = Color(255, 255, 255, 255)
	
	tl, tr, br, bl = top_left, top_right, bottom_right, bottom_left
	tw, th = tex_width, tex_height
	
	RenderTexture(tex_name, "",
	             {tl[1], tl[2], 1, 0  + self.addx, 0,  col},
	             {tr[1], tr[2], 1, tw + self.addx, 0,  col},
	             {br[1], br[2], 1, tw + self.addx, th, col},
	             {bl[1], bl[2], 1, 0  + self.addx, th, col}
	             )
	SetViewMode'world'
end
_editor_class["Title_Mountains"]=Class(_object)
_editor_class["Title_Mountains"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleBackgroundStone"
	self.layer=LAYER_TOP-2
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
end
_editor_class["Title_Mountains"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
end
_editor_class["Title_Mountains"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Title_Sky"]=Class(_object)
_editor_class["Title_Sky"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleBackgroundMountains"
	self.layer=LAYER_TOP-3
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.addx = 0
end
_editor_class["Title_Sky"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	self.addx = self.addx + 0.4
end
_editor_class["Title_Sky"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	local tex_name = "texture:TitleBackgroundClouds"
	local tex_width, tex_height = GetTextureSize(tex_name)
	tex_width, tex_height = tex_width, tex_height
	
	local top_left =     {0   + self.x - 853, 480 + self.y + 30}
	local top_right =    {1706 + self.x - 853, 480 + self.y + 30}
	local bottom_right = {1706 + self.x - 853, 0   + self.y + 30}
	local bottom_left =  {0   + self.x - 853, 0   + self.y + 30}
	
	local col = Color(255, 255, 255, 255)
	
	local tl, tr, br, bl = top_left, top_right, bottom_right, bottom_left
	local tw, th = tex_width, tex_height
	
	RenderTexture(tex_name, "",
	             {tl[1], tl[2], 1, 0  + self.addx, 0,  col},
	             {tr[1], tr[2], 1, tw + self.addx, 0,  col},
	             {br[1], br[2], 1, tw + self.addx, th, col},
	             {bl[1], bl[2], 1, 0  + self.addx, th, col}
	             )
	SetViewMode'world'
end
_editor_class["Title_Cliff"]=Class(_object)
_editor_class["Title_Cliff"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleBackgroundCliff"
	self.layer=LAYER_TOP
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
end
_editor_class["Title_Cliff"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	if self.timer % 25 == 0 then
		last=New(_editor_class["Title_Leaf"],853*2 + 35, ran:Float(700, 900),_)
	else
	end
end
_editor_class["Title_Cliff"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Title_BGM"]=Class(_object)
_editor_class["Title_BGM"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleBGMLabel"
	self.layer=LAYER_TOP
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.posx = -800
	lasttask=task.New(self,function()
		while BaseDrop.positionIndex ~= 1 do
			task._Wait(1)
		end
		do
			local _beg_posx=-800 local posx=_beg_posx  local _w_posx=0 local _end_posx=-700 local _d_w_posx=90/(60-1)
			for _=1,60 do
				self.posx = posx
				task._Wait(1)
				_w_posx=_w_posx+_d_w_posx posx=(_end_posx-_beg_posx)*sin(_w_posx)+(_beg_posx)
			end
		end
		task._Wait(120)
		do
			local _beg_alp=255 local alp=_beg_alp  local _w_alp=0 local _end_alp=0 local _d_w_alp=90/(60-1)
			for _=1,60 do
				_object.set_color(self,"",alp,255,255,255)
				task._Wait(1)
				_w_alp=_w_alp+_d_w_alp alp=(_end_alp-_beg_alp)*sin(_w_alp)+(_beg_alp)
			end
		end
		_del(self,true)
	end)
end
_editor_class["Title_BGM"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,self.posx,25,self.rot,false)
end
_editor_class["Title_BGM"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["Title_Leaf"]=Class(_object)
_editor_class["Title_Leaf"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="image:TitleLeaves" .. ran:Int(1, 9)
	self.layer=LAYER_TOP
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.scale = ran:Float(-0.3, -0.45)
	self.xspeed = ran:Float(1, 2)
	self.yspeed = ran:Float(1, 0.1)
	self.hscale, self.vscale = (1 / 2.25) + self.scale, (1 / 2.25) + self.scale
	self.vx, self.vy = ran:Float(-1, -2), ran:Float(-1, -0.1)
	self.omiga = ran:Float(-1, 1)
end
_editor_class["Title_Leaf"].frame=function(self)
	self.x = BaseDrop.x - self.timer * self.xspeed + 853 * 2
	self.y = BaseDrop.y - self.timer * self.yspeed + 853
	if self.x <= -853 then
		_del(self,true)
	else
	end
	self.class.base.frame(self)
end
_editor_class["Title_Leaf"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
--[[ ]]

_editor_class["MainMenu_Manager"]=Class(_object)
_editor_class["MainMenu_Manager"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.selectionIndex = 1
	self.selectionOptionsIndex = 1
	self.selectionsPosition = {
		{-115, 200 - 50},
		{-115, 150 + 15 - 50},
		{-115, 100 + 30 - 50},
		{-115, 50 + 45 - 50}
	}
	
	self.optionsIn = false
	self.resolutions = {
		{640, 360},
		{853, 480},
		{1024, 576},
		{1280, 720},
		{1366, 768},
		{1600, 900},
		{1920, 1080}
	}
	self.resolutionPick = 1;
	self.windowed = setting.windowed or true;
	self.vsync = setting.vsync or true;
	self.bgm = setting.bgmvolume
	self.sfx = setting.sevolume
	self.optionsText = {
		"Resolution: " .. self.resolutions[self.resolutionPick][1] .. "x" .. self.resolutions[self.resolutionPick][2],
		"\nWindowed: " .. tostring(self.windowed),
		"\n\nVsync: " .. tostring(self.vsync),
		"\n\n\nBGM Volume: " .. self.bgm,
		"\n\n\n\nSFX Volume: " .. self.sfx,
		"\n\n\n\n\nSave and Apply"
	}
	
	self.selectionPositionRefX = {0, 0, 0, 0}
	self.selectionOptionsPositionRefX = {0, 0, 0, 0, 0, 0}
	self.selectionHighlightRefY = 150
	
	self.images = {
		"image:TitleSelections1",
		"image:TitleSelections2",
		"image:TitleSelections3",
		"image:TitleSelections4"
	}
	
	self.waitTimer = 10
end
_editor_class["MainMenu_Manager"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	if BaseDrop.positionIndex == 1 then
		self.waitTimer = self.waitTimer - 1
		if self.waitTimer <= 0 then
			if self.optionsIn == false then
				if is_up_held then
					self.selectionIndex = Wrap(self.selectionIndex - 1, 1, 5)
					PlaySound("select00",0.1,0,false)
				end
				
				if is_down_held then
					self.selectionIndex = Wrap(self.selectionIndex + 1, 1, 5)
					PlaySound("select00",0.1,0,false)
				end
				
				if KeyIsPressed"shoot" then
					if (self.selectionIndex == 1) then
						BaseDrop.positionIndex = 3
					end
					if (self.selectionIndex == 2) then
						BaseDrop.positionIndex = 2
					end
					if (self.selectionIndex == 3) then 
						self.selectionOptionsIndex = 1
						self.optionsIn = true;
					end
					if (self.selectionIndex == 4) then
						stage.QuitGame()
					end
					PlaySound("ok00",0.1,0,false)
				end
			else
				if is_up_held then
					self.selectionOptionsIndex = Wrap(self.selectionOptionsIndex - 1, 1, 7)
					PlaySound("select00",0.1,0,false)
				end
				
				if is_down_held then
					self.selectionOptionsIndex = Wrap(self.selectionOptionsIndex + 1, 1, 7)
					PlaySound("select00",0.1,0,false)
				end
				
				if self.selectionOptionsIndex == 1 then
					if is_left_held then self.resolutionPick = Wrap(self.resolutionPick - 1, 1, 8); PlaySound("select00",0.1,0,false) end
					if is_right_held then self.resolutionPick = Wrap(self.resolutionPick + 1, 1, 8); PlaySound("select00",0.1,0,false) end
				elseif self.selectionOptionsIndex == 2 then
					if is_left_held then self.windowed = not self.windowed; PlaySound("select00",0.1,0,false) end
					if is_right_held then self.windowed = not self.windowed; PlaySound("select00",0.1,0,false) end
				elseif self.selectionOptionsIndex == 3 then
					if is_left_held then self.vsync = not self.vsync; PlaySound("select00",0.1,0,false) end
					if is_right_held then self.vsync = not self.vsync; PlaySound("select00",0.1,0,false) end
				elseif self.selectionOptionsIndex == 4 then
					if is_left_held and KeyIsPressed"slow" then
						self.bgm = Wrap(self.bgm - 1, 0, 101); PlaySound("select00",0.1,0,false)
					elseif is_left_held then
						self.bgm = Wrap(self.bgm - 10, 0, 101); PlaySound("select00",0.1,0,false)
					end
					if is_right_held and KeyIsPressed"slow" then
						self.bgm = Wrap(self.bgm + 1, 0, 101); PlaySound("select00",0.1,0,false)
					elseif is_right_held then
						self.bgm = Wrap(self.bgm + 10, 0, 101); PlaySound("select00",0.1,0,false)
					end
				elseif self.selectionOptionsIndex == 5 then
					if is_left_held and KeyIsPressed"slow" then
						self.sfx = Wrap(self.sfx - 1, 0, 101); PlaySound("select00",0.1,0,false)
					elseif is_left_held then
						self.sfx = Wrap(self.sfx - 10, 0, 101); PlaySound("select00",0.1,0,false)
					end
					if is_right_held and KeyIsPressed"slow" then
						self.bgm = Wrap(self.sfx + 1, 0, 101); PlaySound("select00",0.1,0,false)
					elseif is_right_held then
						self.sfx = Wrap(self.sfx + 10, 0, 101); PlaySound("select00",0.1,0,false)
					end
				end
				
				if KeyIsPressed"shoot" then
					if self.selectionOptionsIndex == 1 then
						self.resolutionPick = Wrap(self.resolutionPick + 1, 1, 8)
					elseif self.selectionOptionsIndex == 2 then
						self.windowed = not self.windowed
					elseif self.selectionOptionsIndex == 3 then
						self.vsync = not self.vsync
					elseif self.selectionOptionsIndex == 4 then
						self.bgm = Wrap(self.bgm + 10, 0, 101)
					elseif self.selectionOptionsIndex == 5 then
						self.sfx = Wrap(self.sfx + 10, 0, 101)
					elseif self.selectionOptionsIndex == 6 then
						setting.resx = self.resolutions[self.resolutionPick][1]
						setting.resy = self.resolutions[self.resolutionPick][2]
						setting.windowed = self.windowed
						setting.vsync = self.vsync
						setting.bgmvolume = self.bgm
						setting.sevolume = self.sfx
						SetBGMVolume(setting.bgmvolume * 0.01)
						SetSEVolume(setting.sevolume * 0.01)
						saveConfigure()
						ChangeVideoMode(setting.resx, setting.resy, setting.windowed, setting.vsync)
						ResetScreen()
						self.optionsIn = false
					end
					PlaySound("ok00",0.1,0,false)
				end
			end
			
			self.optionsText = {
				"Resolution: " .. self.resolutions[self.resolutionPick][1] .. "x" .. self.resolutions[self.resolutionPick][2],
				"\nWindowed: " .. tostring(self.windowed),
				"\n\nVsync: " .. tostring(self.vsync),
				"\n\n\nBGM Volume: " .. self.bgm,
				"\n\n\n\nSFX Volume: " .. self.sfx,
				"\n\n\n\n\nSave and Apply"
			}
		end
		
	else
		self.waitTimer = 10
	end
end
_editor_class["MainMenu_Manager"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	if self.optionsIn == false then
		self.selectionHighlightRefY = LerpDecel(self.selectionHighlightRefY, self.selectionsPosition[self.selectionIndex][2], 0.2)
		Render("image:TitleSelectionsHighlight",
				self.selectionsPosition[self.selectionIndex][1] + self.x - 41,
				self.selectionHighlightRefY + self.y,
				0, self.hscale, self.vscale)
	else
		self.selectionHighlightRefY = LerpDecel(self.selectionHighlightRefY, 185 - ((self.selectionOptionsIndex - 1) * 28.5), 0.2)
		Render("image:TitleSelectionsHighlight",
				self.x - 115 - 41,
				self.selectionHighlightRefY + self.y,
				0, self.hscale, self.vscale)
	end
	
			
	for i = 1, 4 do
		if self.optionsIn == false then
			if i == self.selectionIndex then
				self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], 15, 0.2)
				SetImageState(self.images[i], "", Color(255, 255, 255, 255))
				Render(self.images[i],
					self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
					self.selectionsPosition[i][2] + self.y,
					0, self.hscale, self.vscale)
			else
				self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], 0, 0.2)
				SetImageState(self.images[i], "", Color(155, 255, 255, 255))
				Render(self.images[i],
					self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
					self.selectionsPosition[i][2] + self.y,
					0, self.hscale, self.vscale)
			end
		else
			self.selectionPositionRefX[i] = LerpDecel(self.selectionPositionRefX[i], -200, 0.2)
			SetImageState(self.images[i], "", Color(155, 255, 255, 255))
			Render(self.images[i],
				self.selectionsPosition[i][1] + self.x - self.selectionPositionRefX[i],
				self.selectionsPosition[i][2] + self.y,
				0, self.hscale, self.vscale)
		end
	end
	
	if BaseDrop.positionIndex == 1 then
		for i = 1, 6 do
			if self.optionsIn == true then
				if i == self.selectionOptionsIndex then
					self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], 15, 0.2)
					SetFontState("font:trocchi", "", Color(255,255,255,255))
					lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
				else
					self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], 0, 0.2)
					SetFontState("font:trocchi", "", Color(100,255,255,255))
					lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
				end
			else
				self.selectionOptionsPositionRefX[i] = LerpDecel(self.selectionOptionsPositionRefX[i], -350, 0.2)
				SetFontState("font:trocchi", "", Color(100,255,255,255))
				lstg.RenderText("font:trocchi", self.optionsText[i], -50 + self.x - self.selectionOptionsPositionRefX[i], self.y + 200, self.hscale - 0.2, 2)
			end
		end
	end
	SetViewMode'world'
end
_editor_class["Shop_Manager"]=Class(_object)
_editor_class["Shop_Manager"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.selectionIndex = 1
	self.slotCardOffset = {}
	for i = 1, 16 do
		table.insert(self.slotCardOffset, i, 0)
	end
	
	--print("start " .. tostring(scoredata.ownedCards[1]))
	--scoredata.ownedCards = scoredata.ownedCards or {0,0,0,0,0,0,0,0}
	scoredata.seedAmount = scoredata.seedAmount or 0
	if not scoredata.ownedCards then scoredata.ownedCards = {0,0,0,0,0,0,0,0} end
	if scoredata.seedAmount == nil then scoredata.seedAmount = 0 end
	-- Earth, Water, Fire, Ice, Poison, Lightning, Wind, Metal
	print("end " .. tostring(scoredata.ownedCards[1]))
	
	self.shrubNames = {
		"Verdantia Seraphlora",
		"Etheria Aquaroot",
		"Euphoric Emberbloom",
		"Celestia Crystalily",
		"Mystical Shadowvine",
		"Luminous Glowfern",
		"Whispering Willowspire",
		"Arcane Shimmerthorn"
	}
	
	self.shrubDmg = {
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
		{4, 6, 8},
	}
	
	self.shrubDesc = {
		"The basic plant. \nNothing much special, \nbut packs decent strength.",
		"The water plant. \nSplish splash! A little \nweak, but splashes enemies in area.",
		"The fire plant. \nFerocious, but small ranged. \nGreat damage but weak reach.",
		"The ice plant. \nGood penetration, but weak \nrange. Very shiny.",
		"The poison plant. \nPoisons all lanes, and \nleaves a trail of poison behind.",
		"The lightning plant. \nA strong thunder penetrates\nahead, but with slow recharge.",
		"The wind plant. \nSlows enemies down, and \nhas incredible reach.",
		"The metal plant. \nQuite dull, but is a \nheavy tank. Pretty destructive.",
	}
	
	self.shrubInfoCosts = {
		{1000, 5000, 6000}, -- prices > earth (first is buy price)
		{1500, 5000, 6000}, -- prices > earth (first is buy price)
		{2000, 5000, 6000}, -- prices > earth (first is buy price)
		{1600, 5000, 6000}, -- prices > earth (first is buy price)
		{3000, 5000, 6000}, -- prices > earth (first is buy price)
		{1200, 5000, 6000}, -- prices > earth (first is buy price)
		{1100, 5000, 6000}, -- prices > earth (first is buy price)
		{1400, 5000, 6000} -- prices > earth (first is buy price)
	} -- shrub types
	
	self.yuukaTalk = {
		"Welcome to my stand! There's \nquite a bit of variety I'd say.",
		"If you'd like, I could help you \nout by enhancing these things."
	}
	
	self.yuukaTalkIndex = ran:Int(1, #self.yuukaTalk)
	
	scoredata.shrubLevelUp = {1, 1, 1, 1, 1, 1, 1, 1}
end
_editor_class["Shop_Manager"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	if BaseDrop.positionIndex == 2 then
		if is_up_held then
			self.selectionIndex = Wrap(self.selectionIndex - 1, 1, 17)
			PlaySound("select00",0.1,0,false)
		end
		
		if is_down_held then
			self.selectionIndex = Wrap(self.selectionIndex + 1, 1, 17)
			PlaySound("select00",0.1,0,false)
		end
		
		if is_left_held then
			self.selectionIndex = Wrap(self.selectionIndex - 4, 1, 17)
			PlaySound("select00",0.1,0,false)
		end
		
		if is_right_held then
			self.selectionIndex = Wrap(self.selectionIndex + 4, 1, 17)
			PlaySound("select00",0.1,0,false)
		end
		
		if BaseDrop.x < 20 then
			if KeyIsPressed"shoot" then
				scoredata.ownedCards[Wrap(self.selectionIndex, 1, 9)] = scoredata.ownedCards[Wrap(self.selectionIndex, 1, 9)] + 1
				scoredata.seedAmount = scoredata.seedAmount + 20
				PlaySound("ok00",0.1,0,false)
				PlaySound("astralup",0.8,0,false)
				PlaySound("nice",0.8,0,false)
				PlaySound("item01",0.8,0,false)
			end
		end
		
		if KeyIsPressed"spell" then
			BaseDrop.positionIndex = 1
			PlaySound("cancel00",0.1,0,false)
		end
	end
	
	if self.timer % (60*10) == 0 then
		self.yuukaTalkIndex = ran:Int(1, #self.yuukaTalk)
	end
	
end
_editor_class["Shop_Manager"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	 Render("image:ShopBoard", self.x + 240, self.y + 240, 0, self.hscale, self.vscale)
	
	local offsetX = 0;
	local offsetY = 0;
	
	for i = 1, 16 do
		if self.selectionIndex == i then
			self.slotCardOffset[i] = LerpDecel(self.slotCardOffset[i], 20, 0.3)	
		else
			self.slotCardOffset[i] = LerpDecel(self.slotCardOffset[i], 0, 0.3)	
		end
	end
	
	for i = 1, 8 do
		if i <= 4 then offsetX = 0; offsetY = 0 else offsetX = 100; offsetY = -400; end
		if self.selectionIndex == i then
			SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
			SetImageState("image:ShrubsCards" .. i, "", Color(255, 255, 255, 255))
			Render("image:ShopSlotSeller", self.x + 82 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY, 0, self.hscale, self.vscale)
			Render("image:ShrubsCards" .. i, self.x + 82 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i], 0, self.hscale - 0.2, self.vscale - 0.2)
		else
			SetImageState("image:ShopSlotSeller", "", Color(255, 100, 100, 100))
			SetImageState("image:ShrubsCards" .. i, "", Color(255, 100, 100, 100))
			Render("image:ShopSlotSeller", self.x + 82 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY, self.hscale, self.vscale)
			Render("image:ShrubsCards" .. i, self.x + 82 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i], 0, self.hscale - 0.2, self.vscale - 0.2)
		end
		
	end
	
	for i = 1, 8 do
		if i <= 4 then offsetX = 200; offsetY = 0 else offsetX = 300; offsetY = -400; end
		if self.selectionIndex == i+8 then
			SetImageState("image:ShopSlot", "", Color(255, 255, 255, 255))
			SetImageState("image:ShrubsCardsAlt" .. i, "", Color(255, 255, 255, 255))
			SetImageState("image:ShrubsCardsGray" .. i, "", Color(255, 255, 255, 255))
			Render("image:ShopSlot", self.x + 100 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY, 0, self.hscale, self.vscale)
			if scoredata.ownedCards[i] > 0 then
				Render("image:ShrubsCardsAlt" .. i, self.x + 100 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8], 0, self.hscale - 0.2, self.vscale - 0.2)
			else
				Render("image:ShrubsCardsGray" .. i, self.x + 100 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8], 0, self.hscale - 0.2, self.vscale - 0.2)
			end
			SetFontState("font:trocchi", "", Color(255, 255, 255, 255))
			RenderText("font:trocchi", "x" .. tostring(scoredata.ownedCards[i]), self.x + 98 + offsetX + 20, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8] + 60, self.hscale - 0.2, 2)
		else
			SetImageState("image:ShopSlot", "", Color(255, 100, 100, 100))
			SetImageState("image:ShrubsCardsAlt" .. i, "", Color(255, 100, 100, 100))
			SetImageState("image:ShrubsCardsGray" .. i, "", Color(255, 100, 100, 100))
			Render("image:ShopSlot", self.x + 98 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY, 0, self.hscale, self.vscale)
			if scoredata.ownedCards[i] > 0 then
				Render("image:ShrubsCardsAlt" .. i, self.x + 98 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8], 0, self.hscale - 0.2, self.vscale - 0.2)
			else
				Render("image:ShrubsCardsGray" .. i, self.x + 98 + offsetX, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8], 0, self.hscale - 0.2, self.vscale - 0.2)
			end
			SetFontState("font:trocchi", "", Color(155, 255, 255, 255))
			RenderText("font:trocchi", "x" .. tostring(scoredata.ownedCards[i]), self.x + 98 + offsetX + 20, self.y + 380 - (100 * (i - 1)) - offsetY - 20 + self.slotCardOffset[i+8] + 60, self.hscale - 0.2, 2)
		end
		
	end
	
	SetFontState("font:trocchi", "", Color(255, 255, 255, 255))
	RenderText("font:trocchi", "Available Shrubs", self.x + 34, self.y + 465, self.hscale - 0.2, 2)
	RenderText("font:trocchi", "Owned Shrubs", self.x + 265, self.y + 465, self.hscale - 0.2, 2)
	
	Render("image:YuukaShop", self.x + 680, self.y + 200 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
	Render("image:ShopBoardDesc", self.x + 700, self.y + 10, 0, self.hscale, self.vscale)
	
	lstg.RenderText("font:trocchi", self.shrubNames[Wrap(self.selectionIndex, 1, 9)], self.x + 670, self.y + 222, self.hscale - 0.2, 5)
	lstg.RenderText("font:trocchi",
	"Current Level: ".. scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] ..
	"\nAttack DMG: " .. self.shrubDmg[Wrap(self.selectionIndex, 1, 9)][scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)]] .. ">" .. self.shrubDmg[Wrap(self.selectionIndex, 1, 9)][scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] + 1] ..
	"\nPress Shoot to Buy\nPress Special to Upgrade" ..
	"\n\n" .. self.shrubDesc[Wrap(self.selectionIndex, 1, 9)]
	, self.x + 500, self.y + 190, self.hscale - 0.3, 0)
	
	if (scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] < 3) then
		lstg.RenderText("font:trocchi",
		"Your seeds: " .. scoredata.seedAmount ..
		"\nBuy price: " .. self.shrubInfoCosts[Wrap(self.selectionIndex, 1, 9)][1] ..
		"\nCurrent shrub level: " .. scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] ..
		"\nUpgrade price: " .. self.shrubInfoCosts[Wrap(self.selectionIndex, 1, 9)][Clamp(scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] + 1, 1, 3)]
		, self.x + 680, self.y + 190, self.hscale - 0.3, 0)
	else
		lstg.RenderText("font:trocchi",
		"Your seeds: " .. scoredata.seedAmount ..
		"\nBuy price: " .. self.shrubInfoCosts[Wrap(self.selectionIndex, 1, 9)][1] ..
		"\nCurrent shrub level: " .. scoredata.shrubLevelUp[Wrap(self.selectionIndex, 1, 9)] ..
		"\nUpgrade price: " .. "Max Amount Reached"
		, self.x + 680, self.y + 190, self.hscale - 0.3, 0)
	end
	
	
	Render("image:YuukaTalkBox", self.x + 669, self.y + 280, 0, self.hscale, self.vscale)
	
	lstg.RenderText("font:trocchi", self.yuukaTalk[self.yuukaTalkIndex], self.x + 496, self.y + 302, self.hscale - 0.25, 0)
	SetViewMode'world'
end
_editor_class["Act_Select"]=Class(_object)
_editor_class["Act_Select"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	ActSelect = self
	self.selectionIndex = 1
	self.actText = {
		"Tutorial",
		"Act 1",
		"Act 2",
		"Act 3"
	}
	self.actShadows = {
		{{"image:Isaki_Shadow", "image:Isaki_Highlight"}, {"image:Eternity_Shadow", "image:Eternity_Highlight"}},
		{{"img_void", "img_void"}, {"img_void", "img_void"}},
		{{"image:Kichi_Shadow", "image:Kichi_Highlight"}, {"img_void", "img_void"}},
	}
	self.actName = {
		"Tutorial Act\nFragant Floral Poetry",
		"Act 1\nForest Melodies Ensemble",
		"Act 2\nBlossoming Petal Reverie",
		"Act 3\nArboreal Echoes Mirage"
	}
	
	if not scoredata.clearCount then
		scoredata.clearCount = {
			{0, 0},
			{0, 0},
			{0, 0}
		}
	end
	
	if not scoredata.attemptCount then
		scoredata.attemptCount = {0, 0, 0}
	end
end
_editor_class["Act_Select"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	if BaseDrop.positionIndex == 3 then
		if is_up_held then
			self.selectionIndex = Wrap(self.selectionIndex - 1, 1, 5)
			PlaySound("select00",0.1,0,false)
		end
		
		if is_down_held then
			self.selectionIndex = Wrap(self.selectionIndex + 1, 1, 5)
			PlaySound("select00",0.1,0,false)
		end
		
		if BaseDrop.y > 470 and BaseDrop.x > 840 then
			if KeyIsPressed"shoot" then
				PlaySound("ok00",0.1,0,false)
				BaseDrop.positionIndex = 4
			end
		end
		
		if KeyIsPressed"spell" then
			BaseDrop.positionIndex = 1
			PlaySound("cancel00",0.1,0,false)
		end
	end
end
_editor_class["Act_Select"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	Render("image:TitleShadowCircle", self.x, self.y - 480 * 1.5, self.timer * 0.1, self.hscale, self.vscale)
	Render("image:TitleShadowCircle", self.x - 853, self.y - 480 * 1.5, self.timer * -0.1, self.hscale, self.vscale)
	Render("image:TitleShadowCircle", self.x + 853, self.y - 480 * 1.5, self.timer * -0.1, self.hscale, self.vscale)
	
	Render("image:ActSelectShadow", self.x - 743, self.y - 240, 0, self.hscale + 0.1, self.vscale)
	Render("image:ActSelectRibbon", self.x - 743, self.y - 50  + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
	Render("image:ActSelectRibbon", self.x - 743, self.y + 50 - 480  - (sin(self.timer) * 6), 180, self.hscale, self.vscale)
	
	for i = 1, 4 do
		if self.selectionIndex == i then
			SetFontState("font:trocchi", "", Color(255,255,255,255))
			lstg.RenderText("font:trocchi", self.actText[i], self.x - 743, self.y - 240 - (60 * i) + (35 * 4.3), self.hscale - 0.15, 5)
		else
			SetFontState("font:trocchi", "", Color(200,155,155,155))
			lstg.RenderText("font:trocchi", self.actText[i], self.x - 743, self.y - 240 - (60 * i) + (35 * 4.3), self.hscale - 0.15, 5)
		end
		
	end
	
	SetFontState("font:trocchi", "", Color(255,255,255,255))
	
	if self.selectionIndex > 1 then
		lstg.RenderText("font:trocchi",
		"Attempt Times\n" .. scoredata.attemptCount[self.selectionIndex-1] ..
		"\nClear Times\n" .. (scoredata.clearCount[self.selectionIndex-1][1] + scoredata.clearCount[self.selectionIndex-1][2]) ..
		"\nHigh Score\n" .. (scoredata.hiscore["Scene@Act" .. self.selectionIndex-1 .. "@Marisa"] or 0)
		, self.x - 120, self.y - 100, self.hscale - 0.25, 5)
	
		if scoredata.clearCount[self.selectionIndex-1][1] > 0 then
			Render(self.actShadows[self.selectionIndex-1][1][2], self.x - 420, self.y - 240 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
		else
			Render(self.actShadows[self.selectionIndex-1][1][1], self.x - 420, self.y - 240 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
		end
		
		if scoredata.clearCount[self.selectionIndex-1][2] > 0 then
			Render(self.actShadows[self.selectionIndex-1][2][2], self.x - 380, self.y - 240 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
		else
			Render(self.actShadows[self.selectionIndex-1][2][1], self.x - 380, self.y - 240 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
		end
	end
	
	lstg.RenderText("font:trocchi", self.actName[self.selectionIndex], self.x - 420, self.y - 340 + (sin(self.timer) * 6), self.hscale - 0.15, 5)
	SetViewMode'world'
end
_editor_class["Loadout_Select"]=Class(_object)
_editor_class["Loadout_Select"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1 / 2.25, 1 / 2.25
	self.selectionIndex = 1
	self.selections = {
		"Start Scene",
		"Equip Shrub",
		"Plant Shrub"
	}
	self.menuType = 1
	self.inputDelay = 0
	self.selectionIndexInventory = 1
	self.selectionIndexEquip = 1
	self.selectionIndexPlant = 1
	self.equippedPlants = {0, 0}
	self.plantedPlants = {0, 0, 0, 0, 0, 0, 0, 0}
	self.slotCardOffsetEquip = {0, 0}
	self.slotCardOffsetInventory = {0, 0, 0, 0, 0, 0, 0, 0}
	self.slotCardOffsetPlant = {0, 0, 0, 0, 0, 0}
	self.takeOff = false
end
_editor_class["Loadout_Select"].frame=function(self)
	self.class.base.frame(self)
	_set_rel_pos(self,0,0,self.rot,false)
	if BaseDrop.positionIndex == 4 then
		if self.menuType == 1 then -- Main selections ----------------
			if is_up_held then
				self.selectionIndex = Wrap(self.selectionIndex - 1, 1, 4)
				PlaySound("select00",0.1,0,false)
			end
			
			if is_down_held then
				self.selectionIndex = Wrap(self.selectionIndex + 1, 1, 4)
				PlaySound("select00",0.1,0,false)
			end
			
			if BaseDrop.x < 20 then
				if KeyIsPressed"shoot" then
					if self.selectionIndex == 1 then
						lstg.var.equipCard = {}
						lstg.var.plantCard = {}
						lstg.var.equipCard[1] = self.equippedPlants[1]
						lstg.var.equipCard[2] = self.equippedPlants[2]
						for i = 1, #self.plantedPlants do
							lstg.var.plantCard[i] = self.plantedPlants[i]
						end
						lstg.var.selectedStage = ActSelect.selectionIndex
						stage.group.Start(stage.groups['Act1'], 0)
					elseif self.selectionIndex == 2 then
						self.menuType = 2
					elseif self.selectionIndex == 3 then
						self.menuType = 3
					end
					self.inputDelay = 5
					PlaySound("ok00",0.1,0,false)
				end
			end
			
			if KeyIsPressed"spell" then
				BaseDrop.positionIndex = 3
				PlaySound("cancel00",0.1,0,false)
			end
		end
		
		------------------------------------------------------------------------
		
		if self.menuType == 2 then -- Equip shrubs ----------------
			if is_left_held then
				self.selectionIndexEquip = Wrap(self.selectionIndexEquip - 1, 1, 3)
				PlaySound("select00",0.1,0,false)
			end
			
			if is_right_held then
				self.selectionIndexEquip = Wrap(self.selectionIndexEquip + 1, 1, 3)
				PlaySound("select00",0.1,0,false)
			end
			
			if KeyIsPressed"shoot" and self.inputDelay <= 0 then
				self.menuType = 4
				self.menuSlot = self.selectionIndexEquip
				self.lastMenu = 2
				self.inputDelay = 5
				PlaySound("ok00",0.1,0,false)
			end
			
			if KeyIsPressed"spell" then
				self.menuType = 1
				PlaySound("cancel00",0.1,0,false)
			end
		end
		
		------------------------------------------------------------------------
		
		if self.menuType == 3 then -- Plant shrubs ----------------
			if is_left_held then
				if ActSelect.selectionIndex == 2 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant - 1, 1, 5)
				elseif ActSelect.selectionIndex == 3 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant - 1, 1, 6)
				elseif ActSelect.selectionIndex == 4 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant - 1, 1, 7)
				end
				PlaySound("select00",0.1,0,false)
			end
			
			if is_right_held then
				if ActSelect.selectionIndex == 2 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant + 1, 1, 5)
				elseif ActSelect.selectionIndex == 3 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant + 1, 1, 6)
				elseif ActSelect.selectionIndex == 4 then
					self.selectionIndexPlant = Wrap(self.selectionIndexPlant + 1, 1, 7)
				end
				PlaySound("select00",0.1,0,false)
			end
			
			if KeyIsPressed"shoot" and self.inputDelay <= 0 then
				self.menuType = 4
				self.menuSlot = self.selectionIndexPlant
				self.lastMenu = 3
				self.inputDelay = 5
				PlaySound("ok00",0.1,0,false)
			end
			
			if KeyIsPressed"spell" then
				self.menuType = 1
				PlaySound("cancel00",0.1,0,false)
			end
		end
		
		------------------------------------------------------------------------
		
		if self.menuType == 4 then -- Inventory ----------------
			if is_left_held then
				self.selectionIndexInventory = Wrap(self.selectionIndexInventory - 1, 1, 9)
				PlaySound("select00",0.1,0,false)
			end
			
			if is_right_held then
				self.selectionIndexInventory = Wrap(self.selectionIndexInventory + 1, 1, 9)
				PlaySound("select00",0.1,0,false)
			end
			
			if KeyIsPressed"shoot" and self.inputDelay <= 0 then
				if scoredata.ownedCards[self.selectionIndexInventory] > 0 or (self.plantedPlants[self.selectionIndexPlant] == self.selectionIndexInventory and self.lastMenu == 3) or (self.equippedPlants[self.selectionIndexEquip] == self.selectionIndexInventory and self.lastMenu == 2) then
					if self.lastMenu == 2 then
						if self.equippedPlants[self.selectionIndexEquip] > 0 then
							scoredata.ownedCards[self.equippedPlants[self.selectionIndexEquip]] = scoredata.ownedCards[self.equippedPlants[self.selectionIndexEquip]] + 1
							if self.equippedPlants[self.selectionIndexEquip] == self.selectionIndexInventory then
								self.equippedPlants[self.selectionIndexEquip] = 0
								self.takeOff = true
							end
						end
						if self.equippedPlants[self.selectionIndexEquip] ~= self.selectionIndexInventory and self.takeOff == false then
							self.equippedPlants[self.selectionIndexEquip] = self.selectionIndexInventory
							scoredata.ownedCards[self.selectionIndexInventory] = scoredata.ownedCards[self.selectionIndexInventory] - 1
						else
							self.equippedPlants[self.selectionIndexEquip] = 0
						end
						
					end
					if self.lastMenu == 3 then
						if self.plantedPlants[self.selectionIndexPlant] > 0 then
							scoredata.ownedCards[self.plantedPlants[self.selectionIndexPlant]] = scoredata.ownedCards[self.plantedPlants[self.selectionIndexPlant]] + 1
							if self.plantedPlants[self.selectionIndexPlant] == self.selectionIndexInventory then
								self.plantedPlants[self.selectionIndexPlant] = 0
								self.takeOff = true
							end
						end
						if self.plantedPlants[self.selectionIndexPlant] ~= self.selectionIndexInventory and self.takeOff == false then
							self.plantedPlants[self.selectionIndexPlant] = self.selectionIndexInventory
							scoredata.ownedCards[self.selectionIndexInventory] = scoredata.ownedCards[self.selectionIndexInventory] - 1
						else
							self.plantedPlants[self.selectionIndexPlant] = 0
						end
						
					end
					self.menuType = self.lastMenu
					PlaySound("ok00",0.1,0,false)
					self.takeOff = false
				else
					PlaySound("invalid",0.1,0,false)
				end
				self.inputDelay = 5
			end
			
			if KeyIsPressed"spell" then
				self.menuType = self.lastMenu
				PlaySound("cancel00",0.1,0,false)
			end
		end
		
	end
	
	self.inputDelay = self.inputDelay - 1
end
_editor_class["Loadout_Select"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	Render("image:Marisa_1", self.x + 853/2, self.y - 280 + (sin(self.timer) * 6), 0, self.hscale, self.vscale)
	
	Render("image:InventoryBoard", self.x + 400, self.y - 405, 0, self.hscale, self.vscale)
	Render("image:EquippedBoard", self.x + 120, self.y - 260, 0, self.hscale, self.vscale)
	Render("image:PlantedBoard", self.x + 690, self.y - 160, 0, self.hscale, self.vscale)
	
	self.mPos = {}
	self.mPos.x = 690
	self.mPos.y = 130 - (sin(self.timer) * 3)
	Render("image:legl",   self.x - 4 + self.mPos.x, self.y - 16 - self.mPos.y,  0 - (sin(self.timer) * 6),     self.hscale - 0.2, self.vscale - 0.2)
	Render("image:legr",   self.x + 4 + self.mPos.x, self.y - 16 - self.mPos.y,  0 + (sin(self.timer) * 6),     self.hscale - 0.2, self.vscale - 0.2)
	Render("image:broom",  self.x + self.mPos.x,     self.y - 14 - self.mPos.y,  0,                             self.hscale - 0.2, self.vscale - 0.2)
	Render("image:torso",  self.x + self.mPos.x,     self.y - 12 - self.mPos.y,  0,                             self.hscale - 0.2, self.vscale - 0.2)
	Render("image:arml",   self.x - 5 + self.mPos.x, self.y - 4 - self.mPos.y,  0,                             self.hscale - 0.2, self.vscale - 0.2)
	Render("image:armr",   self.x + 5 + self.mPos.x, self.y - 4 - self.mPos.y,  0,                             self.hscale - 0.2, self.vscale - 0.2)
	Render("image:skirt",  self.x + self.mPos.x,     self.y - 16 - self.mPos.y,  0 + (sin(self.timer * 3) * 8), self.hscale - 0.2, self.vscale - 0.2)
	Render("image:hair",   self.x + self.mPos.x,     self.y + 10 - self.mPos.y, 0 + (sin(self.timer * 6) * 6), self.hscale - 0.2, self.vscale - 0.2)
	Render("image:hat",    self.x + self.mPos.x,     self.y + 14 - self.mPos.y, 0,                             self.hscale - 0.2, self.vscale - 0.2)
	Render("image:hattop", self.x + self.mPos.x,     self.y + 24 - self.mPos.y, 0 + (sin(self.timer) * 10),    self.hscale - 0.2, self.vscale - 0.2)
	
	SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
	if (ActSelect.selectionIndex == 1) then
		for i = 1, 4 do
			if self.selectionIndexPlant == i and self.menuType == 3 then
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 20, 0.3)	
				SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 255, 255, 255)) end
			else
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 0, 0.3)	
				SetImageState("image:ShopSlotSeller", "", Color(255, 100, 100, 100))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 100, 100, 100)) end
			end
			Render("image:ShopSlotSeller", self.x + 560 + 40 + ((i - 1) * 60), self.y - 250, 0, self.hscale - 0.2, self.vscale - 0.2)
			if self.plantedPlants[i] > 0 then Render("image:ShrubsCards" .. self.plantedPlants[i], self.x + 560 + 40 + ((i - 1) * 60), self.y - 270 + self.slotCardOffsetPlant[i], 0, self.hscale - 0.3, self.vscale - 0.3) end
		end
	end
	if (ActSelect.selectionIndex == 2) then
		for i = 1, 4 do
			if self.selectionIndexPlant == i and self.menuType == 3 then
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 20, 0.3)
				SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 255, 255, 255)) end
			else
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 0, 0.3)	
				SetImageState("image:ShopSlotSeller", "", Color(255, 100, 100, 100))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 100, 100, 100)) end
			end
			Render("image:ShopSlotSeller", self.x + 560 + 40 + ((i - 1) * 60), self.y - 250, 0, self.hscale - 0.2, self.vscale - 0.2)
			if self.plantedPlants[i] > 0 then Render("image:ShrubsCards" .. self.plantedPlants[i], self.x + 560 + 40 + ((i - 1) * 60), self.y - 270 + self.slotCardOffsetPlant[i], 0, self.hscale - 0.3, self.vscale - 0.3) end
		end
	end
	if (ActSelect.selectionIndex == 3) then
		for i = 1, 5 do
			if self.selectionIndexPlant == i and self.menuType == 3 then
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 20, 0.3)
				SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 255, 255, 255)) end
			else
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 0, 0.3)
				SetImageState("image:ShopSlotSeller", "", Color(255, 100, 100, 100))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 100, 100, 100)) end
			end
			Render("image:ShopSlotSeller", self.x + 560 + 40 + ((i - 1) * 45), self.y - 250, 0, self.hscale - 0.2, self.vscale - 0.2)
			if self.plantedPlants[i] > 0 then Render("image:ShrubsCards" .. self.plantedPlants[i], self.x + 560 + 40 + ((i - 1) * 45), self.y - 270 + self.slotCardOffsetPlant[i], 0, self.hscale - 0.3, self.vscale - 0.3) end
		end
	end
	if (ActSelect.selectionIndex == 4) then
		for i = 1, 6 do
			if self.selectionIndexPlant == i and self.menuType == 3 then
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 20, 0.3)
				SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 255, 255, 255)) end
			else
				self.slotCardOffsetPlant[i] = LerpDecel(self.slotCardOffsetPlant[i], 0, 0.3)
				SetImageState("image:ShopSlotSeller", "", Color(255, 100, 100, 100))
				if self.plantedPlants[i] > 0 then SetImageState("image:ShrubsCards" .. self.plantedPlants[i], "", Color(255, 100, 100, 100)) end
			end
			Render("image:ShopSlotSeller", self.x + 560 + 40 + ((i - 1) * 36), self.y - 250, 0, self.hscale - 0.2, self.vscale - 0.2)
			if self.plantedPlants[i] > 0 then Render("image:ShrubsCards" .. self.plantedPlants[i], self.x + 560 + 40 + ((i - 1) * 36), self.y - 270 + self.slotCardOffsetPlant[i], 0, self.hscale - 0.3, self.vscale - 0.3) end
		end
	end
	
	lstg.RenderText("font:trocchi", "Equipped", self.x + 120, self.y - 217, self.hscale - 0.2, 5)
	lstg.RenderText("font:trocchi", "Inventory", self.x + 400, self.y - 352, self.hscale - 0.2, 5)
	lstg.RenderText("font:trocchi", "Field Shrubs", self.x + 690, self.y - 70, self.hscale - 0.2, 5)
	
	for i = 1, 3 do
		if self.selectionIndex == i and self.menuType == 1 then
			SetFontState("font:trocchi", "", Color(255,255,255,255))
			lstg.RenderText("font:trocchi", self.selections[i], self.x + 40, self.y - (40 * i), self.hscale - 0.15, 0)
		else
			SetFontState("font:trocchi", "", Color(155,155,155,155))
			lstg.RenderText("font:trocchi", self.selections[i], self.x + 40, self.y - (40 * i), self.hscale - 0.15, 0)
		end
	end
	
	for i = 1, 8 do
		if self.selectionIndexInventory == i and self.menuType == 4 then
			self.slotCardOffsetInventory[i] = LerpDecel(self.slotCardOffsetInventory[i], 20, 0.3)	
			SetImageState("image:ShrubsCards" .. i, "", Color(255, 255, 255, 255))
			SetImageState("image:ShopSlot", "", Color(255, 255, 255, 255))
			SetFontState("font:trocchi", "", Color(255,255,255,255))
		else
			self.slotCardOffsetInventory[i] = LerpDecel(self.slotCardOffsetInventory[i], 0, 0.3)	
			SetImageState("image:ShrubsCards" .. i, "", Color(255, 100, 100, 100))
			SetImageState("image:ShopSlot", "", Color(255, 100, 100, 100))
			SetFontState("font:trocchi", "", Color(155,155,155,155))
		end
		Render("image:ShopSlot", self.x + 40 + (i * 80), self.y - 410, 0, self.hscale - 0.1, self.vscale - 0.1)
		Render("image:ShrubsCards" .. i, self.x + 40 + (i * 80), self.y - 430 + self.slotCardOffsetInventory[i], 0, self.hscale - 0.235, self.vscale - 0.235)
		lstg.RenderText("font:trocchi", "x" .. scoredata.ownedCards[i], self.x + 58 + (i * 80), self.y - 364 + self.slotCardOffsetInventory[i], self.hscale - 0.15, 0)
	end
	
	for i = 1, 2 do
		if self.selectionIndexEquip == i and self.menuType == 2 then
			self.slotCardOffsetEquip[i] = LerpDecel(self.slotCardOffsetEquip[i], 20, 0.3)	
			SetImageState("image:ShopSlot", "", Color(255, 255, 255, 255))
		else
			self.slotCardOffsetEquip[i] = LerpDecel(self.slotCardOffsetEquip[i], 0, 0.3)	
			SetImageState("image:ShopSlot", "", Color(255, 100, 100, 100))
		end
		Render("image:ShopSlot", self.x + 45 + (i * 50), self.y - 265, 0, self.hscale - 0.2, self.vscale - 0.2)
		if self.equippedPlants[i] > 0 then
			if self.selectionIndexEquip == i and self.menuType == 2 then
				SetImageState("image:ShrubsCards" .. self.equippedPlants[i], "", Color(255, 255, 255, 255))
			else
				SetImageState("image:ShrubsCards" .. self.equippedPlants[i], "", Color(255, 100, 100, 100))
			end
			Render("image:ShrubsCards" .. self.equippedPlants[i], self.x + 45 + (i * 50), self.y - 285 + self.slotCardOffsetEquip[i], 0, self.hscale - 0.3, self.vscale - 0.3)
		end
	end
	
	SetViewMode'world'
end
_editor_class["Blackout_Overlay"]=Class(_object)
_editor_class["Blackout_Overlay"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="white"
	self.layer=LAYER_TOP+99
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 853, 480
	_object.set_color(self,"",255,0,0,0)
	self.turnOff = false
	self.alp = 255
	last=New(_editor_class["Blackout_Fade"],self.x,self.y,_)
	lasttask=task.New(self,function()
		while self.turnOff == false do
			task._Wait(1)
		end
		do
			local _beg_alp=255 local alp=_beg_alp  local _w_alp=0 local _end_alp=0 local _d_w_alp=90/(30-1)
			for _=1,30 do
				_object.set_color(self,"",alp,0,0,0)
				self.alp = alp
				task._Wait(1)
				_w_alp=_w_alp+_d_w_alp alp=(_end_alp-_beg_alp)*sin(_w_alp)+(_beg_alp)
			end
		end
		_del(self,true)
	end)
end
_editor_class["Blackout_Overlay"].frame=function(self)
	if KeyIsPressed"shoot" and self.turnOff == false then
		BaseDrop.positionIndex = 1
		self.turnOff = true
		PlaySound("ok00",0.1,self.x/256,false)
		PlaySound("changeitem",1,self.x/256,false)
		LoadMusicRecord("bgm:TitleTheme")
		_play_music("bgm:TitleTheme")
	end
	self.class.base.frame(self)
end
_editor_class["Blackout_Overlay"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetFontState("font:trocchi","",Color(self.alp,255,255,255))
	lstg.RenderText("font:trocchi","Press Shoot\nKey",700,240,1/2.25 - 0.2,5)
	SetFontState("font:trocchi","",Color(self.alp - 50,255,255,255))
	lstg.RenderText("font:trocchi","Touhou Project" .. "\n" ..
"Unofficial Project Shrine Maiden" .. "\n",screen.width/2, screen.height/2 + 150,1/2.25 - 0.3,5)
	lstg.RenderText("font:trocchi","This game is a work of fiction. All characters and organizations that appear have passed into fantasy." .. "\n" ..
"Please enjoy your stay." .. "\n" ..
"\n" ..
"Contact info within game files." .. "\n" ..
"\n" ..
"Presented by: Ryann1908, v1.0",screen.width/2, screen.height/2 - 175,1/2.25 - 0.35,5)
	SetViewMode'world'
end
_editor_class["Blackout_Fade"]=Class(_object)
_editor_class["Blackout_Fade"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="white"
	self.layer=LAYER_TOP+101
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 853, 480
	_object.set_color(self,"",255,0,0,0)
	self.turnOff = false
	self.alp = 255
	lasttask=task.New(self,function()
		do
			local _beg_alp=255 local alp=_beg_alp  local _w_alp=0 local _end_alp=0 local _d_w_alp=90/(15-1)
			for _=1,15 do
				_object.set_color(self,"",alp,0,0,0)
				self.alp = alp
				task._Wait(1)
				_w_alp=_w_alp+_d_w_alp alp=(_end_alp-_beg_alp)*sin(_w_alp)+(_beg_alp)
			end
		end
		_del(self,true)
	end)
end
_editor_class["Blackout_Fade"].frame=function(self)
	self.class.base.frame(self)
end
_editor_class["Blackout_Fade"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	SetViewMode'world'
end
_editor_class["UI_Manager"]=Class(_object)
_editor_class["UI_Manager"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP+10
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1/2.25, 1/2.25
	lstg.var.selectedShrub = 1
	self.repeatSlot = 0
end
_editor_class["UI_Manager"].frame=function(self)
	if KeyIsPressed"spell" then
		lstg.var.selectedShrub = Wrap(lstg.var.selectedShrub + 1, 1, 3)
		PlaySound("select00",0.1,0,false)
	end
	self.class.base.frame(self)
end
_editor_class["UI_Manager"].render=function(self)
	SetViewMode'ui'
	self.class.base.render(self)
	--[[ --- High Score]]
	
	--[[ ]]
	
	Render("image:UIElements1",753, 440,0,self.hscale, self.vscale,0.5)
	SetFontState("font:simplymono","",Color(255,200,200,200))
	lstg.RenderText("font:simplymono",FormatScore(max(lstg.tmpvar.hiscore or 0, lstg.var.score or 0)),753, 440-25,self.hscale - 0.25,5)
	--[[ ]]
	
	--[[ --- Score]]
	
	--[[ ]]
	
	Render("image:UIElements2",753, 440-50,0,self.hscale, self.vscale,0.5)
	SetFontState("font:simplymono","",Color(255,255,255,255))
	lstg.RenderText("font:simplymono",FormatScore(lstg.var.score or 0),753, 440-50-25,self.hscale - 0.25,5)
	--[[ ]]
	
	--[[ --- Lives]]
	
	--[[ ]]
	
	Render("image:UIElements3",753, 440-100,0,self.hscale, self.vscale,0.5)
	for _=1,lstg.var.lifeleft do
		Render("image:HeartIcon",753 - (22 * (lstg.var.lifeleft - 1))/2 + (22 * (_ - 1)), 440-100-25,0,self.hscale - 0.385, self.vscale - 0.385,0.5)
	end
	--[[ ]]
	
	--[[ --- Point Item]]
	
	--[[ ]]
	
	Render("image:UIElements4",753, 440-150,0,self.hscale, self.vscale,0.5)
	SetFontState("font:simplymono","",Color(255,190,190,255))
	lstg.RenderText("font:simplymono",lstg.var.pointrate or 0,753, 440-150-25,self.hscale - 0.25,5)
	--[[ ]]
	
	--[[ --- Graze]]
	
	--[[ ]]
	
	Render("image:UIElements5",753, 440-200,0,self.hscale, self.vscale,0.5)
	SetFontState("font:simplymono","",Color(255,255,255,255))
	lstg.RenderText("font:simplymono",lstg.var.graze or 0,753, 440-200-25,self.hscale - 0.25,5)
	--[[ ]]
	
	--[[ --- Seeds]]
	
	--[[ ]]
	
	Render("image:UIElements8",753, 440-250,0,self.hscale, self.vscale,0.5)
	SetFontState("font:simplymono","",Color(255,255,230,180))
	lstg.RenderText("font:simplymono",scoredata.seedAmount,753, 440-250-25,self.hscale - 0.25,5)
	--[[ ]]
	
	--[[ --- Equipped Shrubs]]
	
	--[[ ]]
	
	Render("image:UIElements6",100, 440,0,self.hscale, self.vscale,0.5)
	SetImageState("image:ShopSlot","",Color(255,255,255,255))
	if lstg.var.selectedShrub == 1 then
		SetImageState("image:ShopSlot","",Color(255,255,255,255))
	else
		SetImageState("image:ShopSlot","",Color(255,100,100,100))
	end
	Render("image:ShopSlot",100 - 30, 440 - 50,0,self.hscale  - 0.15, self.vscale - 0.15,0.5)
	if lstg.var.selectedShrub == 2 then
		SetImageState("image:ShopSlot","",Color(255,255,255,255))
	else
		SetImageState("image:ShopSlot","",Color(255,100,100,100))
	end
	Render("image:ShopSlot",100 + 30, 440 - 50,0,self.hscale  - 0.15, self.vscale - 0.15,0.5)
	if lstg.var.equipCard[1] ~= 0 then
		if lstg.var.selectedShrub == 1 then
			SetImageState("image:ShrubsCards" .. lstg.var.equipCard[1],"",Color(255,255,255,255))
		else
			SetImageState("image:ShrubsCards" .. lstg.var.equipCard[1],"",Color(255,100,100,100))
		end
		Render("image:ShrubsCards" .. lstg.var.equipCard[1],100 - 30, 440 - 50,0,self.hscale  - 0.275, self.vscale - 0.275,0.5)
	end
	if lstg.var.equipCard[2] ~= 0 then
		if lstg.var.selectedShrub == 2 then
			SetImageState("image:ShrubsCards" .. lstg.var.equipCard[2],"",Color(255,255,255,255))
		else
			SetImageState("image:ShrubsCards" .. lstg.var.equipCard[2],"",Color(255,100,100,100))
		end
		Render("image:ShrubsCards" .. lstg.var.equipCard[2],100 + 30, 440 - 50,0,self.hscale  - 0.275, self.vscale - 0.275,0.5)
	end
	--[[ ]]
	
	--[[ --- Planted Shrubs]]
	
	--[[ ]]
	
	Render("image:UIElements7",100, 440-100,0,self.hscale, self.vscale,0.5)
	local offsetX = 0;
	local offsetY = 0;
	
	if lstg.var.selectedStage == 1 or lstg.var.selectedStage == 2 then
		self.repeatSlot = 4
	elseif lstg.var.selectedStage == 3 then
		self.repeatSlot = 5
	elseif lstg.var.selectedStage == 4 then
		self.repeatSlot = 6
	end
	
	for i = 1, self.repeatSlot do
		if i % 2 ~= 0 then
			offsetX = 0
		else
			offsetX = 60
		end
		if i > 4 then
			offsetY = 120
		elseif i > 2 then
			offsetY = 60
		end
		SetImageState("image:ShopSlotSeller", "", Color(255, 255, 255, 255))
		Render("image:ShopSlotSeller", 70 + offsetX, 440 - 150 - offsetY, self.hscale - 0.15, self.vscale - 0.15)
		if lstg.var.plantCard[i] ~= 0 then
			SetImageState("image:ShrubsCards" .. lstg.var.plantCard[i], "", Color(255, 255, 255, 255))
			Render("image:ShrubsCards" .. lstg.var.plantCard[i], 70 + offsetX, 440 - 150 - offsetY, 0, self.hscale  - 0.275, self.vscale - 0.275)
		end
	end
	--[[ ]]
	
	--[[ --- Logo and FPS]]
	
	--[[ ]]
	
	Render("image:TitleLogo",753, 440-350 + (sin(self.timer) * 4),0,self.hscale - 0.275, self.vscale - 0.275,0.5)
	SetFontState("font:trocchi","",Color(255,255,255,255))
	lstg.RenderText("font:trocchi",string.format("%.1ffps", GetFPS()),800, 20,self.hscale - 0.3,0)
	SetViewMode'world'
end
_editor_class["Plant_Manager"]=Class(_object)
_editor_class["Plant_Manager"].init=function(self,_x,_y,_)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_BG+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1/2.25, 1/2.25
	function self.HighlightPlant(loopAmount, plantIndex)
		for i = 1, loopAmount do
			if lstg.var.plantCard[i] ~= 0 then
				if i == plantIndex then
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(200, 255, 255, 255))
				else
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(100, 155, 155, 155))
				end
			end
		end
	end
	
	lstg.var.highlightedPlant = 1
	
	function self.PlayerWithinRange(plantIndex)
		if lstg.var.selectedStage == 1 or lstg.var.selectedStage == 2 then
			if player.x > -224 and player.x < -224/2 and plantIndex == 1 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -224/2 and player.x < 0 and plantIndex == 2 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 0 and player.x < 224/2 and plantIndex == 3 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 224/2 and player.x < 224 and plantIndex == 4 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			return false
		end
		if lstg.var.selectedStage == 3 then
			if player.x > -224 and player.x < -134 and plantIndex == 1 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -134 and player.x < -44 and plantIndex == 2 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -44 and player.x < 46 and plantIndex == 3 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 46 and player.x < 136 and plantIndex == 4 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 136 and player.x < 224 and plantIndex == 5 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			return false
		end
		if lstg.var.selectedStage == 4 then
			if player.x > -224 and player.x < -149.4 and plantIndex == 1 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -149.4 and player.x < -74.8 and plantIndex == 2 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -74.8 and player.x < -0.2 and plantIndex == 3 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > -0.2 and player.x < 74.4 and plantIndex == 4 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 74.4 and player.x < 149 and plantIndex == 5 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			if player.x > 149 and player.x < 224 and plantIndex == 6 then
				lstg.var.highlightedPlant = plantIndex
				return true
			end
			return false
		end
	end
end
_editor_class["Plant_Manager"].frame=function(self)
	self.class.base.frame(self)
	--[[if lstg.var.selectedStage == 1 or lstg.var.selectedStage == 2 then
		if player.x > -224 and player.x < -224/2 then
			self.HighlightPlant(4, 1)
		end
		if player.x > -224/2 and player.x < 0 then
			self.HighlightPlant(4, 2)
		end
		if player.x > 0 and player.x < 224/2 then
			self.HighlightPlant(4, 3)
		end
		if player.x > 224/2 and player.x < 224 then
			self.HighlightPlant(4, 4)
		end
	end--]]
end
_editor_class["Plant_Manager"].render=function(self)
	if lstg.var.selectedStage == 1 or lstg.var.selectedStage == 2 then
		for i = 1, 4 do
			Render("image:ShrubShadow", -224 + ((i - 1) * 224/2), -224, 0, self.hscale, self.vscale)
			self.PlayerWithinRange(i)
			if lstg.var.plantCard[i] ~= 0 then
				if self.PlayerWithinRange(i) then
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(200, 255, 255, 255))
				else
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(100, 155, 155, 155))
				end
				Render("image:ShrubsShooters" .. lstg.var.plantCard[i], -224 + 224/2 + ((i - 1) * 224/2) - 2, -245, 0, self.hscale * 0.528, self.vscale * 0.528)
			end
		end
	elseif lstg.var.selectedStage == 3 then
		for i = 1, 5 do
			Render("image:ShrubShadow", -224 + ((i - 1) * 224/2.5), -224, 0, self.hscale - (0.2/2.25), self.vscale)
			self.PlayerWithinRange(i)
			if lstg.var.plantCard[i] ~= 0 then
				if self.PlayerWithinRange(i) then
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(200, 255, 255, 255))
				else
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(100, 155, 155, 155))
				end
				Render("image:ShrubsShooters" .. lstg.var.plantCard[i], -224 + 90 + ((i - 1) * 90) + 8, -245, 0, self.hscale * 0.528, self.vscale * 0.528)
			end
		end
	elseif lstg.var.selectedStage == 4 then
		for i = 1, 6 do
			Render("image:ShrubShadow", -224 + ((i - 1) * 224/3), -224, 0, self.hscale - (0.325/2.25), self.vscale)
			self.PlayerWithinRange(i)
			if lstg.var.plantCard[i] ~= 0 then
				if self.PlayerWithinRange(i) then
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(200, 255, 255, 255))
				else
					SetImageState("image:ShrubsShooters" .. lstg.var.plantCard[i], "", Color(100, 155, 155, 155))
				end
				Render("image:ShrubsShooters" .. lstg.var.plantCard[i], -224 + 74.6 + ((i - 1) * 74.6) + 17, -245, 0, self.hscale * 0.528, self.vscale * 0.528)
			end
		end
	end
	
	self.class.base.render(self)
end
_editor_class["Stage_Sections"]=Class(_object)
_editor_class["Stage_Sections"].init=function(self,_x,_y,amount, stageIndex, forceFormation)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	StageManager = self
	self.hasFinished = false
	self.formationQueueNext = false
	self.formations = {
		{1, 2, 3, 4, 5, 6},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		{1, 2, 3, 4, 5, 6, 11, 12, 13, 14},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
	}
	self.waveText = {
		"Scarlet Slash", "b", "c", "d",
		"e", "f", "g", "h",
		"i", "j", "k", "l",
		"m", "n", "o", "p",
		"q", "r",
	}
	function self.finishFormation()
		self.formationQueueNext = true
	end
	function self.startFormation(formationIndex)
		last=New(_editor_class["Section_Announcer"],self.x,self.y,self.waveText[formationIndex])
		if formationIndex == 1 then
			do local posy,_d_posy=(40),(-35) for _=1,8 do
				last=New(EnemySimple,7,40,240,160 + posy,{0,3,2},1,false,true,true,function(self)
					task.New(self,function()
						task.BezierMoveTo(60,MOVE_DECEL,self.x - 50, self.y - 6, self.x - 80, self.y - 30)
						task._Wait(15)
						PlaySound("tan00",0.1,self.x/256,false)
						last_list=_create_bullet_group(arrow_big,COLOR_RED,self.x,self.y,7,0,2,2,0,45,true,0,true,true,0,false,self)
						task._Wait(60)
						task.MoveTo(self.x, 260,120,MOVE_ACCEL)
						_del(self,true)
					end)
				end)
				last=New(EnemySimple,7,40,-240,160 + posy,{0,3,2},1,false,true,true,function(self)
					task.New(self,function()
						task.BezierMoveTo(60,MOVE_DECEL,self.x + 50, self.y - 6, self.x + 80, self.y - 30)
						task._Wait(15)
						PlaySound("tan00",0.1,self.x/256,false)
						last_list=_create_bullet_group(arrow_big,COLOR_RED,self.x,self.y,6,0,2,2,0,45,true,0,true,true,0,false,self)
						task._Wait(60)
						task.MoveTo(self.x, 260,120,MOVE_ACCEL)
						_del(self,true)
					end)
				end)
				task._Wait(15)
			posy=posy+_d_posy end end
			last=New(EnemySimple,14,120,0, 240,{0,5,3},1,false,true,true,function(self)
				task.New(self,function()
					task.MoveTo(0,120,60,MOVE_DECEL)
					for _=1,5 do
						PlaySound("kira00",0.1,self.x/256,false)
						do local a,_d_a=(Angle(self, player)),(360/15) for _=1,15 do
							last_list=_create_bullet_group(ball_mid_c,COLOR_RED,self.x + 25 * cos(a),self.y + 25 * sin(a),3,0,3,3,a,15,false,0,true,true,0,false,self)
							last_list=_create_bullet_group(ball_mid_c,COLOR_DEEP_RED,self.x + 25 * cos(a),self.y + 25 * sin(a),3,0,1,1,a,15,false,0,true,true,0,false,self)
						a=a+_d_a end end
						task._Wait(20)
					end
					task._Wait(60)
					task.MoveTo(0,250,180,MOVE_ACCEL)
					_del(self,true)
				end)
			end)
			task._Wait(140)
			for _=1,15 do
				last=New(EnemySimple,23,30,240, 200,{0,2,1},1,false,true,true,function(self)
					task.New(self,function()
						task.BezierMoveTo(100,MOVE_ACC_DEC,-40, 140, -120, 60)
						PlaySound("kira01",0.1,self.x/256,false)
						last_list=_create_bullet_group(grain_b,COLOR_RED,self.x,self.y,3,0,5,5,0,40,true,0,true,true,0,false,self)
						task.CRMoveTo(180,MOVE_ACCEL,-40, 20, -80, 90, 40, 240)
						_del(self,true)
					end)
				end)
				last=New(EnemySimple,23,30,-240, 200,{0,2,1},1,false,true,true,function(self)
					task.New(self,function()
						task.BezierMoveTo(100,MOVE_ACC_DEC,40, 140, 120, 60)
						PlaySound("kira01",0.1,self.x/256,false)
						last_list=_create_bullet_group(grain_b,COLOR_RED,self.x,self.y,3,0,5,5,0,40,true,0,true,true,0,false,self)
						task.CRMoveTo(180,MOVE_ACCEL,40, 20, 80, 90, -40, 240)
						_del(self,true)
					end)
				end)
				task._Wait(15)
			end
			task._Wait(60*3.75)
			self.finishFormation()
		end
		if formationIndex == 2 then
			for _=1,3 do
				task._Wait(30)
				last=New(EnemySimple,14,180,0, 240,{0,15,3},1,false,true,true,function(self)
					task.New(self,function()
						self.x = 0
						self.y = 249
						self.bound = false
						lasttask=task.New(self,function()
							task._Wait(30)
							do local b,_d_b,c,_d_c,d,_d_d=(0),(360/3),(40),(25),(2),(1) for _=1,3 do
								PlaySound("option",0.1,self.x/256,false)
								do local a,_d_a=(b),(360/5) for _=1,5 do
									last=New(EnemySimple,23,15,self.x+c*cos(a),self.y+c*sin(a),{0,1,1},1,false,true,true,function(self)
										task.New(self,function()
											self.rotspeed = b
											self.rs = d
											self.dist = c
											self.off = a
											lasttask=task.New(self,function()
												for _=1,_infinite do
													last_list=_create_bullet_group(ball_small,COLOR_RED,self.x,self.y,7,0,3,3,0,360,true,0,true,true,0,false,self)
													PlaySound("tan00",0.1,self.x/256,false)
													task._Wait(120)
												end
											end)
											lasttask=task.New(self,function()
												for _=1,_infinite do
													self.rotspeed = self.rotspeed + self.rs
													_set_rel_pos(self,self.dist*cos(self.rotspeed + self.off),self.dist*sin(self.rotspeed + self.off),self.rot,false)
													task._Wait(1)
												end
											end)
										end)
									end)
									_connect(self,last,0,true)
									task._Wait(1)
								a=a+_d_a end end
								task._Wait(60)
							b=b+_d_b c=c+_d_c d=d+_d_d end end
						end)
						lasttask=task.New(self,function()
							task.MoveTo(0,100,60,MOVE_ACC_DEC)
							task.MoveTo(-100,100,60,MOVE_ACC_DEC)
							task._Wait(60)
							New(boss_cast_ef,self.x,self.y,360,255,0,0,60,2,false)
							task._Wait(60)
							PlaySound("kira00",0.1,self.x/256,false)
							last_list=_create_bullet_group(ball_huge,COLOR_RED,self.x,self.y,25,0,2,2,0,360,true,0,true,true,0,false,self)
							task._Wait(60)
							task.MoveTo(self.x,-360,290,MOVE_ACCEL)
							_del(self,true)
						end)
					end)
				end)
				task._Wait(60*3.75)
				last=New(EnemySimple,14,180,0, 240,{0,15,3},1,false,true,true,function(self)
					task.New(self,function()
						self.x = 0
						self.y = 249
						self.bound = false
						lasttask=task.New(self,function()
							task._Wait(30)
							do local b,_d_b,c,_d_c,d,_d_d=(0),(360/3),(40),(25),(2),(1) for _=1,3 do
								PlaySound("option",0.1,self.x/256,false)
								do local a,_d_a=(b),(360/5) for _=1,5 do
									last=New(EnemySimple,23,15,self.x+c*cos(a),self.y+c*sin(a),{0,1,1},1,false,true,true,function(self)
										task.New(self,function()
											self.rotspeed = b
											self.rs = d
											self.dist = c
											self.off = a
											lasttask=task.New(self,function()
												for _=1,_infinite do
													last_list=_create_bullet_group(ball_small,COLOR_RED,self.x,self.y,7,0,3,3,0,360,true,0,true,true,0,false,self)
													PlaySound("tan00",0.1,self.x/256,false)
													task._Wait(120)
												end
											end)
											lasttask=task.New(self,function()
												for _=1,_infinite do
													self.rotspeed = self.rotspeed + self.rs
													_set_rel_pos(self,self.dist*cos(self.rotspeed + self.off),self.dist*sin(self.rotspeed + self.off),self.rot,false)
													task._Wait(1)
												end
											end)
										end)
									end)
									_connect(self,last,0,true)
									task._Wait(1)
								a=a+_d_a end end
								task._Wait(60)
							b=b+_d_b c=c+_d_c d=d+_d_d end end
						end)
						lasttask=task.New(self,function()
							task.MoveTo(0,100,60,MOVE_ACC_DEC)
							task.MoveTo(100,100,60,MOVE_ACC_DEC)
							task._Wait(60)
							New(boss_cast_ef,self.x,self.y,360,255,0,0,60,2,false)
							task._Wait(60)
							PlaySound("kira00",0.1,self.x/256,false)
							last_list=_create_bullet_group(ball_huge,COLOR_RED,self.x,self.y,25,0,2,2,0,360,true,0,true,true,0,false,self)
							task._Wait(60)
							task.MoveTo(self.x,-360,290,MOVE_ACCEL)
							_del(self,true)
						end)
					end)
				end)
				task._Wait(60*3.75)
			end
			task._Wait(60*2)
			self.finishFormation()
		end
	end
	lasttask=task.New(self,function()
		for _=1,amount do
			if forceFormation then
				self.startFormation(self.formations[4][forceFormation])
			else
				self.startFormation(self.formations[stageIndex][ran:Int(1, #self.formations[stageIndex])])
			end
			while self.formationQueueNext == false do
				task._Wait(1)
			end
			self.formationQueueNext = false
		end
	end)
end
_editor_class["Section_Announcer"]=Class(_object)
_editor_class["Section_Announcer"].init=function(self,_x,_y,waveText)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_ENEMY-5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.x,self.y=0,250
	self.waveText = waveText
	PlaySound("noise",0.6,self.x/256,false)
	lasttask=task.New(self,function()
		do
			local _beg_pos=250 local pos=_beg_pos local _end_pos=160 local _w_pos=0 local _d_w_pos=1/(45-1)
			local _beg_col=0 local col=_beg_col local _end_col=255 local _w_col=0 local _d_w_col=1/(45-1)
			for _=1,45 do
				_object.set_color(self,"",col,255,255,255)
				self.x,self.y=0,pos
				task._Wait(1)
				_w_pos=_w_pos+_d_w_pos pos=(_beg_pos-_end_pos)*(_w_pos-1)^2+_end_pos
				_w_col=_w_col+_d_w_col col=(_beg_col-_end_col)*(_w_col-1)^2+_end_col
			end
		end
		task._Wait(30)
		do
			local _beg_pos=160 local pos=_beg_pos local _end_pos=120 local _w_pos=0  local _d_w_pos=1/(30-1)
			local _beg_col=255 local col=_beg_col local _end_col=0 local _w_col=0  local _d_w_col=1/(30-1)
			for _=1,30 do
				_object.set_color(self,"",col,255,255,255)
				self.x,self.y=0,pos
				task._Wait(1)
				_w_pos=_w_pos+_d_w_pos pos=(_end_pos-_beg_pos)*_w_pos^2+_beg_pos
				_w_col=_w_col+_d_w_col col=(_end_col-_beg_col)*_w_col^2+_beg_col
			end
		end
		_del(self,true)
	end)
end
_editor_class["Section_Announcer"].render=function(self)
	SetFontState("font:trocchi","",Color(self._a - 35,255,225,145))
	lstg.RenderText("font:trocchi","Enemy Wave Incoming",self.x,self.y,1/2.25 - 0.2,5)
	SetFontState("font:trocchi","",Color(self._a - 35,255,255,255))
	lstg.RenderText("font:trocchi",self.waveText,self.x,self.y-25,1/2.25 - 0.275,5)
	self.class.base.render(self)
end
_editor_class["Spell_Cutin"]=Class(_object)
_editor_class["Spell_Cutin"].init=function(self,_x,_y,char)
	self.x,self.y=_x,_y
	self.img="img_void"
	self.layer=LAYER_TOP-1
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.x=280
	self.y=15
	self.vscale=1/2.25
	self.hscale=1/2.25
	self.img = "image:" .. char .. "_Cutin"
	_object.set_color(self,"",0,255,255,255)
	lasttask=task.New(self,function()
		New(tasker, function()
			lasttask=task.New(self,function()
				do
					local _beg_speed=9.5 local speed=_beg_speed  local _w_speed=-90 local _end_speed=0.8 local _d_w_speed=180/(46-1)
					for _=1,46 do
						SetV2(self,speed,190,false,false)
						task._Wait(1)
						_w_speed=_w_speed+_d_w_speed speed=(_end_speed-_beg_speed)/2*sin(_w_speed)+((_end_speed+_beg_speed)/2)
					end
				end
				task._Wait(60)
				do
					local _beg_speed=0.8 local speed=_beg_speed  local _w_speed=-90 local _end_speed=7 local _d_w_speed=90/(46-1)
					for _=1,46 do
						SetV2(self,speed,190,false,false)
						task._Wait(1)
						_w_speed=_w_speed+_d_w_speed speed=(_end_speed-_beg_speed)*sin(_w_speed)+(_end_speed)
					end
				end
				_del(self,true)
			end)
			lasttask=task.New(self,function()
				do
					local _beg_alpha_a=0 local alpha_a=_beg_alpha_a  local _w_alpha_a=0 local _end_alpha_a=255 local _d_w_alpha_a=90/(46-1)
					local _beg_alpha_b=0 local alpha_b=_beg_alpha_b  local _w_alpha_b=-90 local _end_alpha_b=255 local _d_w_alpha_b=180/(46-1)
					for _=1,46 do
						_object.set_color(self,"",alpha_b,alpha_a,alpha_a,alpha_a)
						task._Wait(1)
						_w_alpha_a=_w_alpha_a+_d_w_alpha_a alpha_a=(_end_alpha_a-_beg_alpha_a)*sin(_w_alpha_a)+(_beg_alpha_a)
						_w_alpha_b=_w_alpha_b+_d_w_alpha_b alpha_b=(_end_alpha_b-_beg_alpha_b)/2*sin(_w_alpha_b)+((_end_alpha_b+_beg_alpha_b)/2)
					end
				end
				task._Wait(60)
				do
					local _beg_alpha_a=255 local alpha_a=_beg_alpha_a  local _w_alpha_a=0 local _end_alpha_a=200 local _d_w_alpha_a=90/(46-1)
					local _beg_alpha_b=255 local alpha_b=_beg_alpha_b  local _w_alpha_b=-90 local _end_alpha_b=0 local _d_w_alpha_b=180/(46-1)
					for _=1,46 do
						_object.set_color(self,"",alpha_b,alpha_a,alpha_a,alpha_a)
						task._Wait(1)
						_w_alpha_a=_w_alpha_a+_d_w_alpha_a alpha_a=(_end_alpha_a-_beg_alpha_a)*sin(_w_alpha_a)+(_beg_alpha_a)
						_w_alpha_b=_w_alpha_b+_d_w_alpha_b alpha_b=(_end_alpha_b-_beg_alpha_b)/2*sin(_w_alpha_b)+((_end_alpha_b+_beg_alpha_b)/2)
					end
				end
			end)
		end)
	end)
end
_editor_class["Base_Shot"]=Class(_object)
_editor_class["Base_Shot"].init=function(self,_x,_y,_)
	player_bullet_straight.init(self,"image:Marisa_Shot1",_x,_y,16,90,2)
	self.hp = 10
	self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
	self._servants = {}
	self.hscale, self.vscale = 1/4, 1/4
	_object.set_color(self,"mul+add",55,255,255,255)
	self.a, self.b, self.rect = 16, 8,false
end
_editor_class["Base_Shot"].frame=function(self)
	task.Do(self)
	player_bullet_straight.frame(self)
	self.class.base.frame(self)
end
_editor_class["Base_Shot"].render=function(self)
	player_bullet_straight.render(self)
	self.class.base.render(self)
end
_editor_class["Base_Shot"].colli=function(self)
	self.class.base.colli(self)
end
_editor_class["Base_Shot"].kill=function(self)
	last=New(_editor_class["Shot_Effect"],self.x,self.y,self.rot, "image:Marisa_Shot")
end
_editor_class["Base_Shot"].del=function(self)
	self.class.base.del(self)
end
_editor_class["Earth_Shot"]=Class(_object)
_editor_class["Earth_Shot"].init=function(self,_x,_y,speed)
	player_bullet_straight.init(self,"image:Earth_Shot1",_x,_y,speed,90,1)
	self.hp = 10
	self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
	self._servants = {}
	self.hscale, self.vscale = 1/4, 1/4
	_object.set_color(self,"mul+add",55,255,255,255)
	self.a, self.b, self.rect = 16, 8,false
end
_editor_class["Earth_Shot"].frame=function(self)
	task.Do(self)
	player_bullet_straight.frame(self)
	self.class.base.frame(self)
end
_editor_class["Earth_Shot"].render=function(self)
	player_bullet_straight.render(self)
	self.class.base.render(self)
end
_editor_class["Earth_Shot"].colli=function(self)
	self.class.base.colli(self)
end
_editor_class["Earth_Shot"].kill=function(self)
	last=New(_editor_class["Shot_Effect"],self.x,self.y,self.rot, "image:Earth_Shot")
end
_editor_class["Earth_Shot"].del=function(self)
	self.class.base.del(self)
end
_editor_class["Fire_Shot"]=Class(_object)
_editor_class["Fire_Shot"].init=function(self,_x,_y,speed)
	player_bullet_straight.init(self,"image:Fire_Shot1",_x,_y,speed,ran:Int(60, 180-60),1.5)
	self.hp = 10
	self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
	self._servants = {}
	self.hscale, self.vscale = 1/4, 1/4
	_object.set_color(self,"mul+add",55,255,255,255)
	self.a, self.b, self.rect = 16, 8,false
	lasttask=task.New(self,function()
		do
			local _beg_mov=speed local mov=_beg_mov local _end_mov=0 local _w_mov=0 local _d_w_mov=1/(80-1)
			for _=1,80 do
				SetV2(self,mov,self.rot,true,false)
				task._Wait(1)
				_w_mov=_w_mov+_d_w_mov mov=(_beg_mov-_end_mov)*(_w_mov-1)^2+_end_mov
			end
		end
		_del(self,true)
	end)
end
_editor_class["Fire_Shot"].frame=function(self)
	task.Do(self)
	player_bullet_straight.frame(self)
	self.class.base.frame(self)
end
_editor_class["Fire_Shot"].render=function(self)
	player_bullet_straight.render(self)
	self.class.base.render(self)
end
_editor_class["Fire_Shot"].colli=function(self)
	self.class.base.colli(self)
end
_editor_class["Fire_Shot"].kill=function(self)
	last=New(_editor_class["Shot_Effect"],self.x,self.y,self.rot, "image:Fire_Shot")
end
_editor_class["Fire_Shot"].del=function(self)
	self.class.base.del(self)
end
_editor_class["Ice_Shot"]=Class(_object)
_editor_class["Ice_Shot"].init=function(self,_x,_y,angle)
	player_bullet_straight.init(self,"image:Ice_Shot1",_x,_y,16,angle,2)
	self.hp = 10
	self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
	self._servants = {}
	self.hscale, self.vscale = 1/4, 1/4
	_object.set_color(self,"mul+add",55,255,255,255)
	self.a, self.b, self.rect = 16, 8,false
	lasttask=task.New(self,function()
		do
			local _beg_mov=16 local mov=_beg_mov local _end_mov=0 local _w_mov=0 local _d_w_mov=1/(60-1)
			for _=1,60 do
				SetV2(self,mov,self.rot,true,false)
				task._Wait(1)
				_w_mov=_w_mov+_d_w_mov mov=(_beg_mov-_end_mov)*(_w_mov-1)^2+_end_mov
			end
		end
		_del(self,true)
	end)
end
_editor_class["Ice_Shot"].frame=function(self)
	task.Do(self)
	player_bullet_straight.frame(self)
	self.class.base.frame(self)
end
_editor_class["Ice_Shot"].render=function(self)
	player_bullet_straight.render(self)
	self.class.base.render(self)
end
_editor_class["Ice_Shot"].colli=function(self)
	self.class.base.colli(self)
end
_editor_class["Ice_Shot"].kill=function(self)
	last=New(_editor_class["Shot_Effect"],self.x,self.y,self.rot, "image:Ice_Shot")
end
_editor_class["Ice_Shot"].del=function(self)
	self.class.base.del(self)
end
_editor_class["Lightning_Shot"]=Class(_object)
_editor_class["Lightning_Shot"].init=function(self,_x,_y,angle)
	player_bullet_straight.init(self,"image:Lightning_Ray",_x,_y,0,angle,0.035)
	self.hp = 10
	self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
	self._servants = {}
	self.hscale, self.vscale = 1/2, 1/4
	_object.set_color(self,"mul+add",35,255,255,255)
	self.a, self.b, self.rect = 448, 8,false
	self.killflag = true
	lasttask=task.New(self,function()
		do
			local _beg_scale=1/2 local scale=_beg_scale local _end_scale=0 local _w_scale=0 local _d_w_scale=1/(30-1)
			for _=1,30 do
				self.hscale, self.vscale = scale, 1/4
				task._Wait(1)
				_w_scale=_w_scale+_d_w_scale scale=(_beg_scale-_end_scale)*(_w_scale-1)^2+_end_scale
			end
		end
		_del(self,true)
	end)
end
_editor_class["Lightning_Shot"].frame=function(self)
	task.Do(self)
	player_bullet_straight.frame(self)
	self.class.base.frame(self)
end
_editor_class["Lightning_Shot"].render=function(self)
	player_bullet_straight.render(self)
	self.class.base.render(self)
end
_editor_class["Lightning_Shot"].colli=function(self)
	self.class.base.colli(self)
end
_editor_class["Lightning_Shot"].kill=function(self)
end
_editor_class["Lightning_Shot"].del=function(self)
	self.class.base.del(self)
end
_editor_class["Shot_Effect"]=Class(_object)
_editor_class["Shot_Effect"].init=function(self,_x,_y,ang, img)
	self.x,self.y=_x,_y
	self.img=img .. 1
	self.layer=LAYER_PLAYER_BULLET+5
	self.group=GROUP_GHOST
	self.hide=false
	self.bound=false
	self.navi=false
	self.hp=10
	self.maxhp=10
	self.colli=false
	self._servants={}
	self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
	self.hscale, self.vscale = 1/4, 1/4
	self.rot = ran:Int(-2, 2) + ang
	_object.set_color(self,"mul+add",155,255,255,255)
	lasttask=task.New(self,function()
		for _=1,4 do
			self.img = img .. _
			task._Wait(2)
		end
	end)
	lasttask=task.New(self,function()
		do
			local _beg_alp=155 local alp=_beg_alp  local _w_alp=0 local _end_alp=0 local _d_w_alp=90/(10-1)
			for _=1,10 do
				_object.set_color(self,"mul+add",alp,255,255,255)
				task._Wait(4)
				_w_alp=_w_alp+_d_w_alp alp=(_end_alp-_beg_alp)*sin(_w_alp)+(_beg_alp)
			end
		end
		_del(self,true)
	end)
end
Marisa=Class(player_class)
Marisa.init=function(self)
	player_class.init(self)
	self.name = "Marisa"
	--[[ Add Option List Here]]
	
	LoadTexture('blank_void','blank_void.png')
	LoadImageGroup('blank_void','blank_void',0,0,32,48,8,3,0.5,0.5)
	self.imgs = {}
	self.A, self.B = 0.5,0.5
	for i = 1, 24 do self.imgs[i]='blank_void'..i end
	player.hspeed, player.lspeed = 4,2
	player.protect = 120
	self.hscale, self.vscale = 1/8, 1/8
	self.armllerp = 0
	self.armrlerp = 0
	self.legllerp = 0
	self.legrlerp = 0
	self.hairlerp = 0
	self.hatlerp = 0
	self.hattoplerp = 0
	self.skirtlerp = 0
	self.broomlerp = 0
	self.torsolerp = 0
	self.options = {lstg.var.equipCard[1], lstg.var.equipCard[2]}
	self.optionPosition = {
		{-30, 0, -15, 30},
		{30, 0, 15, 30}
	}
	self.optionCurrentPosition = {
		{0, 0},
		{0, 0}
	}
	function self.optionFire(x, y, shrubIndex)
		if shrubIndex == 1 then
			do local speed,_d_speed=(10),(16) for _=1,2 do
				last=New(_editor_class["Earth_Shot"],x, y,speed)
			speed=speed+_d_speed end end
		elseif shrubIndex == 2 then
		elseif shrubIndex == 3 then
			for _=1,6 do
				last=New(_editor_class["Fire_Shot"],x, y,ran:Float(4, 12))
			end
		elseif shrubIndex == 4 then
			if x > player.x then
				do local ang,_d_ang=(0),(360/3) for _=1,3 do
					last=New(_editor_class["Ice_Shot"],x, y,self.timer + ang)
					last=New(_editor_class["Ice_Shot"],x, y,self.timer + ang + (360/3)/2)
				ang=ang+_d_ang end end
			else
				do local ang,_d_ang=(0),(360/3) for _=1,3 do
					last=New(_editor_class["Ice_Shot"],x, y,-self.timer + ang + (360/3)/2)
					last=New(_editor_class["Ice_Shot"],x, y,-self.timer + ang + (360/3)/2 + (360/3)/2)
				ang=ang+_d_ang end end
			end
		elseif shrubIndex == 6 then
			last=New(_editor_class["Lightning_Shot"],x, y,90)
			last=New(_editor_class["Lightning_Shot"],x, y,-90)
		else
		end
	end
	player.nextspell = 999999999
end
Marisa.frame=function(self)
	task.Do(self)	player_class.frame(self)
	if KeyIsDown"left" and KeyIsDown"right" then
		self.armllerp = LerpDecel(self.armllerp, 0, 0.1)
		self.armrlerp = LerpDecel(self.armllerp, 0, 0.1)
		self.legllerp = LerpDecel(self.legllerp, 0, 0.1)
		self.legrlerp = LerpDecel(self.legrlerp, 0, 0.1)
		self.hairlerp = LerpDecel(self.hairlerp, 0, 0.1)
		self.hatlerp = LerpDecel(self.hatlerp, 0, 0.1)
		self.hattoplerp = LerpDecel(self.hattoplerp, 0, 0.1)
		self.skirtlerp = LerpDecel(self.skirtlerp, 0, 0.1)
		self.broomlerp = LerpDecel(self.broomlerp, 0, 0.1)
		self.torsolerp = LerpDecel(self.torsolerp, 0, 0.1)
	elseif KeyIsDown"left" then
		self.armllerp = LerpDecel(self.armllerp, 15, 0.1)
		self.armrlerp = LerpDecel(self.armrlerp, 15, 0.1)
		self.legllerp = LerpDecel(self.legllerp, 20, 0.1)
		self.legrlerp = LerpDecel(self.legrlerp, 20, 0.1)
		self.hairlerp = LerpDecel(self.hairlerp, 20, 0.1)
		self.hatlerp = LerpDecel(self.hatlerp, 15, 0.1)
		self.hattoplerp = LerpDecel(self.hattoplerp, 20, 0.1)
		self.skirtlerp = LerpDecel(self.skirtlerp, 30, 0.1)
		self.broomlerp = LerpDecel(self.broomlerp, 15, 0.1)
		self.torsolerp = LerpDecel(self.torsolerp, 15, 0.1)
	elseif KeyIsDown"right" then
		self.armllerp = LerpDecel(self.armllerp, -15, 0.1)
		self.armrlerp = LerpDecel(self.armrlerp, -15, 0.1)
		self.legllerp = LerpDecel(self.legllerp, -20, 0.1)
		self.legrlerp = LerpDecel(self.legrlerp, -20, 0.1)
		self.hairlerp = LerpDecel(self.hairlerp, -20, 0.1)
		self.hatlerp = LerpDecel(self.hatlerp, -15, 0.1)
		self.hattoplerp = LerpDecel(self.hattoplerp, -20, 0.1)
		self.skirtlerp = LerpDecel(self.skirtlerp, -30, 0.1)
		self.broomlerp = LerpDecel(self.broomlerp, -15, 0.1)
		self.torsolerp = LerpDecel(self.torsolerp, -15, 0.1)
	else
		self.armllerp = LerpDecel(self.armllerp, 0, 0.1)
		self.armrlerp = LerpDecel(self.armllerp, 0, 0.1)
		self.legllerp = LerpDecel(self.legllerp, 0, 0.1)
		self.legrlerp = LerpDecel(self.legrlerp, 0, 0.1)
		self.hairlerp = LerpDecel(self.hairlerp, 0, 0.1)
		self.hatlerp = LerpDecel(self.hatlerp, 0, 0.1)
		self.hattoplerp = LerpDecel(self.hattoplerp, 0, 0.1)
		self.skirtlerp = LerpDecel(self.skirtlerp, 0, 0.1)
		self.broomlerp = LerpDecel(self.broomlerp, 0, 0.1)
		self.torsolerp = LerpDecel(self.torsolerp, 0, 0.1)
	end
	self.options = {lstg.var.equipCard[1], lstg.var.equipCard[2]}
	
	if KeyIsDown"slow" == false then
		self.optionCurrentPosition[1][1] = LerpDecel(self.optionCurrentPosition[1][1], self.optionPosition[1][1], 0.1)
		self.optionCurrentPosition[1][2] = LerpDecel(self.optionCurrentPosition[1][2], self.optionPosition[1][2], 0.1)
		
		self.optionCurrentPosition[2][1] = LerpDecel(self.optionCurrentPosition[2][1], self.optionPosition[2][1], 0.1)
		self.optionCurrentPosition[2][2] = LerpDecel(self.optionCurrentPosition[2][2], self.optionPosition[2][2], 0.1)
	else
		self.optionCurrentPosition[1][1] = LerpDecel(self.optionCurrentPosition[1][1], self.optionPosition[1][3], 0.1)
		self.optionCurrentPosition[1][2] = LerpDecel(self.optionCurrentPosition[1][2], self.optionPosition[1][4], 0.1)
		
		self.optionCurrentPosition[2][1] = LerpDecel(self.optionCurrentPosition[2][1], self.optionPosition[2][3], 0.1)
		self.optionCurrentPosition[2][2] = LerpDecel(self.optionCurrentPosition[2][2], self.optionPosition[2][4], 0.1)
	end
end
Marisa.render=function(self)
	player_class.render(self)
	if self.options[1] ~= 0 then
		SetImageState("image:Hakkero", "", Color(255, 255, 255, 255))
	else
		SetImageState("image:Hakkero", "", Color(100, 155, 155, 155))
	end
	
	Render("image:Hakkero", self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.timer * -1, 1/3.75, 1/3.75)
	
	if self.options[2] ~= 0 then
		SetImageState("image:Hakkero", "", Color(255, 255, 255, 255))
	else
		SetImageState("image:Hakkero", "", Color(100, 155, 155, 155))
	end
	
	Render("image:Hakkero", self.x + self.optionCurrentPosition[2][1], self.y + self.optionCurrentPosition[2][2], self.timer * 1, 1/3.75, 1/3.75)
	
	if self.protect % 4 == 0 then
		SetImageState("image:legl", "", Color(255, 255, 255, 255))
		SetImageState("image:legr", "", Color(255, 255, 255, 255))
		SetImageState("image:broom", "", Color(255, 255, 255, 255))
		SetImageState("image:torso", "", Color(255, 255, 255, 255))
		SetImageState("image:arml", "", Color(255, 255, 255, 255))
		SetImageState("image:armr", "", Color(255, 255, 255, 255))
		SetImageState("image:skirt", "", Color(255, 255, 255, 255))
		SetImageState("image:hair", "", Color(255, 255, 255, 255))
		SetImageState("image:hat", "", Color(255, 255, 255, 255))
		SetImageState("image:hattop", "", Color(255, 255, 255, 255))
	else
		SetImageState("image:legl", "", Color(255, 50, 50, 255))
		SetImageState("image:legr", "", Color(255, 50, 50, 255))
		SetImageState("image:broom", "", Color(255, 50, 50, 255))
		SetImageState("image:torso", "", Color(255, 50, 50, 255))
		SetImageState("image:arml", "", Color(255, 50, 50, 255))
		SetImageState("image:armr", "", Color(255, 50, 50, 255))
		SetImageState("image:skirt", "", Color(255, 50, 50, 255))
		SetImageState("image:hair", "", Color(255, 50, 50, 255))
		SetImageState("image:hat", "", Color(255, 50, 50, 255))
		SetImageState("image:hattop", "", Color(255, 50, 50, 255))
	end
	
	Render("image:legl", self.x - 2, self.y - 4, 0 - (sin(self.timer) * 6) + self.legllerp, self.hscale, self.vscale)
	Render("image:legr", self.x + 2, self.y - 4, 0 + (sin(self.timer) * 6) + self.legrlerp, self.hscale, self.vscale)
	Render("image:broom", self.x, self.y - 2, 0 + self.broomlerp, self.hscale, self.vscale)
	Render("image:torso", self.x, self.y + 2, 0 + self.torsolerp, self.hscale, self.vscale)
	Render("image:arml", self.x - 3, self.y + 4, 0 + self.armllerp, self.hscale, self.vscale)
	Render("image:armr", self.x + 3, self.y + 4, 0 + self.armrlerp, self.hscale, self.vscale)
	Render("image:skirt", self.x, self.y - 2, 0 + (sin(self.timer * 3) * 8) + self.skirtlerp, self.hscale, self.vscale)
	Render("image:hair", self.x, self.y + 12, 0 + (sin(self.timer * 6) * 6) + self.hairlerp, self.hscale, self.vscale)
	Render("image:hat", self.x, self.y + 14, 0 + self.hatlerp, self.hscale, self.vscale)
	Render("image:hattop", self.x, self.y + 21, 0 + (sin(self.timer) * 10) + self.hattoplerp, self.hscale, self.vscale)
		for i = 1, 4 do
		if self.sp[i] and self.sp[i][3] > 0.5 then
			Render("leaf", self.supportx + self.sp[i][1], self.supporty + self.sp[i][2], self.timer * 3)
		end
	end
end
Marisa.shoot=function(self)
	player.nextshoot = 4
	PlaySound("plst00",0.3,self.x/1024,false)
	last=New(_editor_class["Base_Shot"],self.x - 8,self.y + 4,_)
	last=New(_editor_class["Base_Shot"],self.x + 8,self.y + 4,_)
	self.optionFire(self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.options[1])
	self.optionFire(self.x + self.optionCurrentPosition[2][1], self.y + self.optionCurrentPosition[2][2], self.options[2])
end
Marisa.spell=function(self)
end
Marisa.special=function(self)
	player.nextsp = 20
	PlaySound("slash",0.8,self.x/1024,false)
	local optionSel = lstg.var.equipCard[lstg.var.selectedShrub]
	local plantSel = lstg.var.plantCard[lstg.var.highlightedPlant]
	
	lstg.var.equipCard[lstg.var.selectedShrub] = plantSel
	lstg.var.plantCard[lstg.var.highlightedPlant] = optionSel
end
table.insert(player_list, {'Marisa Kirisame','Marisa','Marisa'})_editor_class["Eternity"]=Class(boss)
_editor_class["Eternity"].cards={}
_editor_class["Eternity"].name="Eternity Larva"
_editor_class["Eternity"].bgm=""
_editor_class["Eternity"]._bg=nil
_editor_class["Eternity"].difficulty="All"
_editor_class["Eternity"].init=function(self,cards)
	boss.init(self,240,384,_editor_class["Eternity"].name,cards,New(_editor_class["IsakiBG"]),_editor_class["Eternity"].difficulty)
	self._wisys = BossWalkImageSystem(self)
	self._wisys:SetImage("Eternity_Boss.png",3,4,{4,4,4},{1,2},6,16,16)
	self.hscale, self.vscale = 1/2.25, 1/2.25
end
_tmp_sc=boss.card.New("bnvbnvbnvbnvbnvbnvbnvbnvbnvbnvbn",2,5,25,1000,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
	lasttask=task.New(self,function()
		last=New(_editor_class["Spell_Cutin"],self.x,self.y,"Isaki")
		task.MoveTo(0,122,60,MOVE_NORMAL)
		do
			local _h_a=(100-(-100))/2 local _t_a=(100+(-100))/2 local a=_h_a*sin(0)+_t_a local _w_a=0 local _d_w_a=1.5
			for _=1,_infinite do
				self.x,self.y=a,self.y
				task._Wait(1)
				_w_a=_w_a+_d_w_a a=_h_a*sin(_w_a)+_t_a
			end
		end
	end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["Eternity"].cards,_tmp_sc)
table.insert(_sc_table,{"Eternity","bnvbnvbnvbnvbnvbnvbnvbnvbnvbnvbn",_tmp_sc,#_editor_class["Eternity"].cards,false})
_tmp_sc=boss.card.New("「」",2,5,60,1200,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
	lasttask=task.New(self,function()
		task.MoveTo(0,120,60,MOVE_NORMAL)
	end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["Eternity"].cards,_tmp_sc)
table.insert(_sc_table,{"Eternity","「」",_tmp_sc,#_editor_class["Eternity"].cards,false})
-- Title Screen
	stage_init = stage.New("menu", true, true)
	function stage_init:init()
		checker_up = coroutine.create(MenuInputChecker)
		checker_down = coroutine.create(MenuInputChecker)
		checker_left = coroutine.create(MenuInputChecker)
		checker_right = coroutine.create(MenuInputChecker)
		checker_c = coroutine.create(MenuInputChecker)
		lstg.var.rep_player = "Marisa"
		lstg.var.player_name = "Marisa"
		last=New(_editor_class["Base_Drop"],853, 0,_)
	end
	function stage_init:frame()
		_, is_up_held = coroutine.resume(checker_up, "up")
		_, is_down_held = coroutine.resume(checker_down, "down")
		_, is_left_held = coroutine.resume(checker_left, "left")
		_, is_right_held = coroutine.resume(checker_right, "right")
		_, is_c_held = coroutine.resume(checker_c, "special")
		if is_debug then
			if GetKeyState(KEY.U) then scoredata.tutoriallock = false end
			if GetKeyState(KEY.L) then scoredata.tutoriallock = true end
		end
		task.Do(self)
	end

stage.group.New('menu',{},"Act1",{lifeleft=7,power=400,faith=50000,bomb=3},true,1)
stage.group.AddStage('Act1','Scene@Act1',{lifeleft=7,power=400,faith=50000,bomb=3},true)
stage.group.DefStageFunc('Scene@Act1','init',function(self)
	_init_item(self)
	difficulty=self.group.difficulty
	New(mask_fader,'open')
	if jstg then jstg.CreatePlayers() else New(_G[lstg.var.player_name]) end
	lasttask=task.New(self,function()
		SetWorldUEX(screen.width/2, screen.height/2, 448, 448, 32, 32)
		lstg.var.lifeleft = 2
		New(_editor_class["magic_forest_background"] or magic_forest_background)
		last=New(_editor_class["Plant_Manager"],self.x,self.y,_)
		last=New(_editor_class["UI_Manager"],self.x,self.y,_)
		task._Wait(60)
		last=New(_editor_class["Stage_Sections"],self.x,self.y,4, 4, 2)
		task._Wait(9999999)
	end)
	task.New(self,function()
		while coroutine.status(self.task[1])~='dead' do task.Wait() end
		stage.group.FinishReplay()
		New(mask_fader,'close')
		task.New(self,function()
			local _,bgm=EnumRes('bgm')
			for i=1,30 do
				for _,v in pairs(bgm) do
					if GetMusicState(v)=='playing' then
						SetBGMVolume(v,1-i/30)
					end
				end
				task.Wait()
			end
		end)
		task.Wait(30)
		stage.group.FinishStage()
	end)
end)
